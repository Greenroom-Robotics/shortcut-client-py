# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoryActionStoryCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_url': 'str',
        'description': 'str',
        'started': 'bool',
        'entity_type': 'str',
        'task_ids': 'list[int]',
        'story_type': 'str',
        'name': 'str',
        'completed': 'bool',
        'blocker': 'bool',
        'epic_id': 'int',
        'requested_by_id': 'str',
        'iteration_id': 'int',
        'label_ids': 'list[int]',
        'workflow_state_id': 'int',
        'object_story_link_ids': 'list[int]',
        'follower_ids': 'list[str]',
        'owner_ids': 'list[str]',
        'id': 'int',
        'estimate': 'int',
        'subject_story_link_ids': 'list[int]',
        'action': 'str',
        'blocked': 'bool',
        'project_id': 'int',
        'deadline': 'str'
    }

    attribute_map = {
        'app_url': 'app_url',
        'description': 'description',
        'started': 'started',
        'entity_type': 'entity_type',
        'task_ids': 'task_ids',
        'story_type': 'story_type',
        'name': 'name',
        'completed': 'completed',
        'blocker': 'blocker',
        'epic_id': 'epic_id',
        'requested_by_id': 'requested_by_id',
        'iteration_id': 'iteration_id',
        'label_ids': 'label_ids',
        'workflow_state_id': 'workflow_state_id',
        'object_story_link_ids': 'object_story_link_ids',
        'follower_ids': 'follower_ids',
        'owner_ids': 'owner_ids',
        'id': 'id',
        'estimate': 'estimate',
        'subject_story_link_ids': 'subject_story_link_ids',
        'action': 'action',
        'blocked': 'blocked',
        'project_id': 'project_id',
        'deadline': 'deadline'
    }

    def __init__(self, app_url=None, description=None, started=None, entity_type=None, task_ids=None, story_type=None, name=None, completed=None, blocker=None, epic_id=None, requested_by_id=None, iteration_id=None, label_ids=None, workflow_state_id=None, object_story_link_ids=None, follower_ids=None, owner_ids=None, id=None, estimate=None, subject_story_link_ids=None, action=None, blocked=None, project_id=None, deadline=None):  # noqa: E501
        """HistoryActionStoryCreate - a model defined in Swagger"""  # noqa: E501
        self._app_url = None
        self._description = None
        self._started = None
        self._entity_type = None
        self._task_ids = None
        self._story_type = None
        self._name = None
        self._completed = None
        self._blocker = None
        self._epic_id = None
        self._requested_by_id = None
        self._iteration_id = None
        self._label_ids = None
        self._workflow_state_id = None
        self._object_story_link_ids = None
        self._follower_ids = None
        self._owner_ids = None
        self._id = None
        self._estimate = None
        self._subject_story_link_ids = None
        self._action = None
        self._blocked = None
        self._project_id = None
        self._deadline = None
        self.discriminator = None
        self.app_url = app_url
        if description is not None:
            self.description = description
        if started is not None:
            self.started = started
        self.entity_type = entity_type
        if task_ids is not None:
            self.task_ids = task_ids
        self.story_type = story_type
        self.name = name
        if completed is not None:
            self.completed = completed
        if blocker is not None:
            self.blocker = blocker
        if epic_id is not None:
            self.epic_id = epic_id
        if requested_by_id is not None:
            self.requested_by_id = requested_by_id
        if iteration_id is not None:
            self.iteration_id = iteration_id
        if label_ids is not None:
            self.label_ids = label_ids
        if workflow_state_id is not None:
            self.workflow_state_id = workflow_state_id
        if object_story_link_ids is not None:
            self.object_story_link_ids = object_story_link_ids
        if follower_ids is not None:
            self.follower_ids = follower_ids
        if owner_ids is not None:
            self.owner_ids = owner_ids
        self.id = id
        if estimate is not None:
            self.estimate = estimate
        if subject_story_link_ids is not None:
            self.subject_story_link_ids = subject_story_link_ids
        self.action = action
        if blocked is not None:
            self.blocked = blocked
        if project_id is not None:
            self.project_id = project_id
        if deadline is not None:
            self.deadline = deadline

    @property
    def app_url(self):
        """Gets the app_url of this HistoryActionStoryCreate.  # noqa: E501

        The application URL of the Story.  # noqa: E501

        :return: The app_url of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._app_url

    @app_url.setter
    def app_url(self, app_url):
        """Sets the app_url of this HistoryActionStoryCreate.

        The application URL of the Story.  # noqa: E501

        :param app_url: The app_url of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """
        if app_url is None:
            raise ValueError("Invalid value for `app_url`, must not be `None`")  # noqa: E501

        self._app_url = app_url

    @property
    def description(self):
        """Gets the description of this HistoryActionStoryCreate.  # noqa: E501

        The description of the Story.  # noqa: E501

        :return: The description of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HistoryActionStoryCreate.

        The description of the Story.  # noqa: E501

        :param description: The description of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def started(self):
        """Gets the started of this HistoryActionStoryCreate.  # noqa: E501

        Whether or not the Story has been started.  # noqa: E501

        :return: The started of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this HistoryActionStoryCreate.

        Whether or not the Story has been started.  # noqa: E501

        :param started: The started of this HistoryActionStoryCreate.  # noqa: E501
        :type: bool
        """

        self._started = started

    @property
    def entity_type(self):
        """Gets the entity_type of this HistoryActionStoryCreate.  # noqa: E501

        The type of entity referenced.  # noqa: E501

        :return: The entity_type of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this HistoryActionStoryCreate.

        The type of entity referenced.  # noqa: E501

        :param entity_type: The entity_type of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def task_ids(self):
        """Gets the task_ids of this HistoryActionStoryCreate.  # noqa: E501

        An array of Task IDs on this Story.  # noqa: E501

        :return: The task_ids of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: list[int]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids):
        """Sets the task_ids of this HistoryActionStoryCreate.

        An array of Task IDs on this Story.  # noqa: E501

        :param task_ids: The task_ids of this HistoryActionStoryCreate.  # noqa: E501
        :type: list[int]
        """

        self._task_ids = task_ids

    @property
    def story_type(self):
        """Gets the story_type of this HistoryActionStoryCreate.  # noqa: E501

        The type of Story; either feature, bug, or chore.  # noqa: E501

        :return: The story_type of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._story_type

    @story_type.setter
    def story_type(self, story_type):
        """Sets the story_type of this HistoryActionStoryCreate.

        The type of Story; either feature, bug, or chore.  # noqa: E501

        :param story_type: The story_type of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """
        if story_type is None:
            raise ValueError("Invalid value for `story_type`, must not be `None`")  # noqa: E501
        allowed_values = ["feature", "chore", "bug"]  # noqa: E501
        if story_type not in allowed_values:
            raise ValueError(
                "Invalid value for `story_type` ({0}), must be one of {1}"  # noqa: E501
                .format(story_type, allowed_values)
            )

        self._story_type = story_type

    @property
    def name(self):
        """Gets the name of this HistoryActionStoryCreate.  # noqa: E501

        The name of the Story.  # noqa: E501

        :return: The name of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HistoryActionStoryCreate.

        The name of the Story.  # noqa: E501

        :param name: The name of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def completed(self):
        """Gets the completed of this HistoryActionStoryCreate.  # noqa: E501

        Whether or not the Story is completed.  # noqa: E501

        :return: The completed of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this HistoryActionStoryCreate.

        Whether or not the Story is completed.  # noqa: E501

        :param completed: The completed of this HistoryActionStoryCreate.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def blocker(self):
        """Gets the blocker of this HistoryActionStoryCreate.  # noqa: E501

        Whether or not the Story is blocking another Story.  # noqa: E501

        :return: The blocker of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._blocker

    @blocker.setter
    def blocker(self, blocker):
        """Sets the blocker of this HistoryActionStoryCreate.

        Whether or not the Story is blocking another Story.  # noqa: E501

        :param blocker: The blocker of this HistoryActionStoryCreate.  # noqa: E501
        :type: bool
        """

        self._blocker = blocker

    @property
    def epic_id(self):
        """Gets the epic_id of this HistoryActionStoryCreate.  # noqa: E501

        The Epic ID for this Story.  # noqa: E501

        :return: The epic_id of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._epic_id

    @epic_id.setter
    def epic_id(self, epic_id):
        """Sets the epic_id of this HistoryActionStoryCreate.

        The Epic ID for this Story.  # noqa: E501

        :param epic_id: The epic_id of this HistoryActionStoryCreate.  # noqa: E501
        :type: int
        """

        self._epic_id = epic_id

    @property
    def requested_by_id(self):
        """Gets the requested_by_id of this HistoryActionStoryCreate.  # noqa: E501

        The ID of the Member that requested the Story.  # noqa: E501

        :return: The requested_by_id of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._requested_by_id

    @requested_by_id.setter
    def requested_by_id(self, requested_by_id):
        """Sets the requested_by_id of this HistoryActionStoryCreate.

        The ID of the Member that requested the Story.  # noqa: E501

        :param requested_by_id: The requested_by_id of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """

        self._requested_by_id = requested_by_id

    @property
    def iteration_id(self):
        """Gets the iteration_id of this HistoryActionStoryCreate.  # noqa: E501

        The Iteration ID the Story is in.  # noqa: E501

        :return: The iteration_id of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._iteration_id

    @iteration_id.setter
    def iteration_id(self, iteration_id):
        """Sets the iteration_id of this HistoryActionStoryCreate.

        The Iteration ID the Story is in.  # noqa: E501

        :param iteration_id: The iteration_id of this HistoryActionStoryCreate.  # noqa: E501
        :type: int
        """

        self._iteration_id = iteration_id

    @property
    def label_ids(self):
        """Gets the label_ids of this HistoryActionStoryCreate.  # noqa: E501

        An array of Labels IDs attached to the Story.  # noqa: E501

        :return: The label_ids of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: list[int]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this HistoryActionStoryCreate.

        An array of Labels IDs attached to the Story.  # noqa: E501

        :param label_ids: The label_ids of this HistoryActionStoryCreate.  # noqa: E501
        :type: list[int]
        """

        self._label_ids = label_ids

    @property
    def workflow_state_id(self):
        """Gets the workflow_state_id of this HistoryActionStoryCreate.  # noqa: E501

        An array of Workflow State IDs attached to the Story.  # noqa: E501

        :return: The workflow_state_id of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._workflow_state_id

    @workflow_state_id.setter
    def workflow_state_id(self, workflow_state_id):
        """Sets the workflow_state_id of this HistoryActionStoryCreate.

        An array of Workflow State IDs attached to the Story.  # noqa: E501

        :param workflow_state_id: The workflow_state_id of this HistoryActionStoryCreate.  # noqa: E501
        :type: int
        """

        self._workflow_state_id = workflow_state_id

    @property
    def object_story_link_ids(self):
        """Gets the object_story_link_ids of this HistoryActionStoryCreate.  # noqa: E501

        An array of Story IDs that are the object of a Story Link relationship.  # noqa: E501

        :return: The object_story_link_ids of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: list[int]
        """
        return self._object_story_link_ids

    @object_story_link_ids.setter
    def object_story_link_ids(self, object_story_link_ids):
        """Sets the object_story_link_ids of this HistoryActionStoryCreate.

        An array of Story IDs that are the object of a Story Link relationship.  # noqa: E501

        :param object_story_link_ids: The object_story_link_ids of this HistoryActionStoryCreate.  # noqa: E501
        :type: list[int]
        """

        self._object_story_link_ids = object_story_link_ids

    @property
    def follower_ids(self):
        """Gets the follower_ids of this HistoryActionStoryCreate.  # noqa: E501

        An array of Member IDs for the followers of the Story.  # noqa: E501

        :return: The follower_ids of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._follower_ids

    @follower_ids.setter
    def follower_ids(self, follower_ids):
        """Sets the follower_ids of this HistoryActionStoryCreate.

        An array of Member IDs for the followers of the Story.  # noqa: E501

        :param follower_ids: The follower_ids of this HistoryActionStoryCreate.  # noqa: E501
        :type: list[str]
        """

        self._follower_ids = follower_ids

    @property
    def owner_ids(self):
        """Gets the owner_ids of this HistoryActionStoryCreate.  # noqa: E501

        An array of Member IDs that are the owners of the Story.  # noqa: E501

        :return: The owner_ids of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this HistoryActionStoryCreate.

        An array of Member IDs that are the owners of the Story.  # noqa: E501

        :param owner_ids: The owner_ids of this HistoryActionStoryCreate.  # noqa: E501
        :type: list[str]
        """

        self._owner_ids = owner_ids

    @property
    def id(self):
        """Gets the id of this HistoryActionStoryCreate.  # noqa: E501

        The ID of the entity referenced.  # noqa: E501

        :return: The id of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoryActionStoryCreate.

        The ID of the entity referenced.  # noqa: E501

        :param id: The id of this HistoryActionStoryCreate.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def estimate(self):
        """Gets the estimate of this HistoryActionStoryCreate.  # noqa: E501

        The estimate (or point value) for the Story.  # noqa: E501

        :return: The estimate of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate):
        """Sets the estimate of this HistoryActionStoryCreate.

        The estimate (or point value) for the Story.  # noqa: E501

        :param estimate: The estimate of this HistoryActionStoryCreate.  # noqa: E501
        :type: int
        """

        self._estimate = estimate

    @property
    def subject_story_link_ids(self):
        """Gets the subject_story_link_ids of this HistoryActionStoryCreate.  # noqa: E501

        An array of Story IDs that are the subject of a Story Link relationship.  # noqa: E501

        :return: The subject_story_link_ids of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: list[int]
        """
        return self._subject_story_link_ids

    @subject_story_link_ids.setter
    def subject_story_link_ids(self, subject_story_link_ids):
        """Sets the subject_story_link_ids of this HistoryActionStoryCreate.

        An array of Story IDs that are the subject of a Story Link relationship.  # noqa: E501

        :param subject_story_link_ids: The subject_story_link_ids of this HistoryActionStoryCreate.  # noqa: E501
        :type: list[int]
        """

        self._subject_story_link_ids = subject_story_link_ids

    @property
    def action(self):
        """Gets the action of this HistoryActionStoryCreate.  # noqa: E501

        The action of the entity referenced.  # noqa: E501

        :return: The action of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this HistoryActionStoryCreate.

        The action of the entity referenced.  # noqa: E501

        :param action: The action of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["create"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def blocked(self):
        """Gets the blocked of this HistoryActionStoryCreate.  # noqa: E501

        Whether or not the Story is blocked by another Story.  # noqa: E501

        :return: The blocked of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this HistoryActionStoryCreate.

        Whether or not the Story is blocked by another Story.  # noqa: E501

        :param blocked: The blocked of this HistoryActionStoryCreate.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def project_id(self):
        """Gets the project_id of this HistoryActionStoryCreate.  # noqa: E501

        The Project ID of the Story is in.  # noqa: E501

        :return: The project_id of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this HistoryActionStoryCreate.

        The Project ID of the Story is in.  # noqa: E501

        :param project_id: The project_id of this HistoryActionStoryCreate.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def deadline(self):
        """Gets the deadline of this HistoryActionStoryCreate.  # noqa: E501

        The timestamp representing the Story's deadline.  # noqa: E501

        :return: The deadline of this HistoryActionStoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this HistoryActionStoryCreate.

        The timestamp representing the Story's deadline.  # noqa: E501

        :param deadline: The deadline of this HistoryActionStoryCreate.  # noqa: E501
        :type: str
        """

        self._deadline = deadline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryActionStoryCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryActionStoryCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
