# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_type': 'str',
        'name': 'str',
        'type': 'str',
        'updated_at': 'datetime',
        'external_id': 'str',
        'id': 'int',
        'url': 'str',
        'full_name': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'entity_type': 'entity_type',
        'name': 'name',
        'type': 'type',
        'updated_at': 'updated_at',
        'external_id': 'external_id',
        'id': 'id',
        'url': 'url',
        'full_name': 'full_name',
        'created_at': 'created_at'
    }

    def __init__(self, entity_type=None, name=None, type=None, updated_at=None, external_id=None, id=None, url=None, full_name=None, created_at=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._entity_type = None
        self._name = None
        self._type = None
        self._updated_at = None
        self._external_id = None
        self._id = None
        self._url = None
        self._full_name = None
        self._created_at = None
        self.discriminator = None
        self.entity_type = entity_type
        self.name = name
        self.type = type
        self.updated_at = updated_at
        self.external_id = external_id
        self.id = id
        self.url = url
        self.full_name = full_name
        self.created_at = created_at

    @property
    def entity_type(self):
        """Gets the entity_type of this Repository.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Repository.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this Repository.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this Repository.  # noqa: E501

        The shorthand name of the VCS repository.  # noqa: E501

        :return: The name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.

        The shorthand name of the VCS repository.  # noqa: E501

        :param name: The name of this Repository.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Repository.  # noqa: E501

        The type of Repository. Currently this can only be \"github\".  # noqa: E501

        :return: The type of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Repository.

        The type of Repository. Currently this can only be \"github\".  # noqa: E501

        :param type: The type of this Repository.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Repository.  # noqa: E501

        The time/date the Repository was updated.  # noqa: E501

        :return: The updated_at of this Repository.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Repository.

        The time/date the Repository was updated.  # noqa: E501

        :param updated_at: The updated_at of this Repository.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def external_id(self):
        """Gets the external_id of this Repository.  # noqa: E501

        The VCS unique identifier for the Repository.  # noqa: E501

        :return: The external_id of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Repository.

        The VCS unique identifier for the Repository.  # noqa: E501

        :param external_id: The external_id of this Repository.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this Repository.  # noqa: E501

        The ID associated to the VCS repository in Shortcut.  # noqa: E501

        :return: The id of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repository.

        The ID associated to the VCS repository in Shortcut.  # noqa: E501

        :param id: The id of this Repository.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this Repository.  # noqa: E501

        The URL of the Repository.  # noqa: E501

        :return: The url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repository.

        The URL of the Repository.  # noqa: E501

        :param url: The url of this Repository.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def full_name(self):
        """Gets the full_name of this Repository.  # noqa: E501

        The full name of the VCS repository.  # noqa: E501

        :return: The full_name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Repository.

        The full name of the VCS repository.  # noqa: E501

        :param full_name: The full_name of this Repository.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def created_at(self):
        """Gets the created_at of this Repository.  # noqa: E501

        The time/date the Repository was created.  # noqa: E501

        :return: The created_at of this Repository.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Repository.

        The time/date the Repository was created.  # noqa: E501

        :param created_at: The created_at of this Repository.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
