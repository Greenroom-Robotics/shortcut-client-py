# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Branch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_type': 'str',
        'deleted': 'bool',
        'name': 'str',
        'persistent': 'bool',
        'updated_at': 'datetime',
        'pull_requests': 'list[PullRequest]',
        'merged_branch_ids': 'list[int]',
        'id': 'int',
        'url': 'str',
        'repository_id': 'int',
        'created_at': 'datetime'
    }

    attribute_map = {
        'entity_type': 'entity_type',
        'deleted': 'deleted',
        'name': 'name',
        'persistent': 'persistent',
        'updated_at': 'updated_at',
        'pull_requests': 'pull_requests',
        'merged_branch_ids': 'merged_branch_ids',
        'id': 'id',
        'url': 'url',
        'repository_id': 'repository_id',
        'created_at': 'created_at'
    }

    def __init__(self, entity_type=None, deleted=None, name=None, persistent=None, updated_at=None, pull_requests=None, merged_branch_ids=None, id=None, url=None, repository_id=None, created_at=None):  # noqa: E501
        """Branch - a model defined in Swagger"""  # noqa: E501
        self._entity_type = None
        self._deleted = None
        self._name = None
        self._persistent = None
        self._updated_at = None
        self._pull_requests = None
        self._merged_branch_ids = None
        self._id = None
        self._url = None
        self._repository_id = None
        self._created_at = None
        self.discriminator = None
        self.entity_type = entity_type
        self.deleted = deleted
        self.name = name
        self.persistent = persistent
        self.updated_at = updated_at
        self.pull_requests = pull_requests
        self.merged_branch_ids = merged_branch_ids
        self.id = id
        self.url = url
        self.repository_id = repository_id
        self.created_at = created_at

    @property
    def entity_type(self):
        """Gets the entity_type of this Branch.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this Branch.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Branch.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this Branch.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def deleted(self):
        """Gets the deleted of this Branch.  # noqa: E501

        A true/false boolean indicating if the Branch has been deleted.  # noqa: E501

        :return: The deleted of this Branch.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Branch.

        A true/false boolean indicating if the Branch has been deleted.  # noqa: E501

        :param deleted: The deleted of this Branch.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def name(self):
        """Gets the name of this Branch.  # noqa: E501

        The name of the Branch.  # noqa: E501

        :return: The name of this Branch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Branch.

        The name of the Branch.  # noqa: E501

        :param name: The name of this Branch.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def persistent(self):
        """Gets the persistent of this Branch.  # noqa: E501

        A true/false boolean indicating if the Branch is persistent; e.g. master.  # noqa: E501

        :return: The persistent of this Branch.  # noqa: E501
        :rtype: bool
        """
        return self._persistent

    @persistent.setter
    def persistent(self, persistent):
        """Sets the persistent of this Branch.

        A true/false boolean indicating if the Branch is persistent; e.g. master.  # noqa: E501

        :param persistent: The persistent of this Branch.  # noqa: E501
        :type: bool
        """
        if persistent is None:
            raise ValueError("Invalid value for `persistent`, must not be `None`")  # noqa: E501

        self._persistent = persistent

    @property
    def updated_at(self):
        """Gets the updated_at of this Branch.  # noqa: E501

        The time/date the Branch was updated.  # noqa: E501

        :return: The updated_at of this Branch.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Branch.

        The time/date the Branch was updated.  # noqa: E501

        :param updated_at: The updated_at of this Branch.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def pull_requests(self):
        """Gets the pull_requests of this Branch.  # noqa: E501

        An array of PullRequests attached to the Branch (there is usually only one).  # noqa: E501

        :return: The pull_requests of this Branch.  # noqa: E501
        :rtype: list[PullRequest]
        """
        return self._pull_requests

    @pull_requests.setter
    def pull_requests(self, pull_requests):
        """Sets the pull_requests of this Branch.

        An array of PullRequests attached to the Branch (there is usually only one).  # noqa: E501

        :param pull_requests: The pull_requests of this Branch.  # noqa: E501
        :type: list[PullRequest]
        """
        if pull_requests is None:
            raise ValueError("Invalid value for `pull_requests`, must not be `None`")  # noqa: E501

        self._pull_requests = pull_requests

    @property
    def merged_branch_ids(self):
        """Gets the merged_branch_ids of this Branch.  # noqa: E501

        The IDs of the Branches the Branch has been merged into.  # noqa: E501

        :return: The merged_branch_ids of this Branch.  # noqa: E501
        :rtype: list[int]
        """
        return self._merged_branch_ids

    @merged_branch_ids.setter
    def merged_branch_ids(self, merged_branch_ids):
        """Sets the merged_branch_ids of this Branch.

        The IDs of the Branches the Branch has been merged into.  # noqa: E501

        :param merged_branch_ids: The merged_branch_ids of this Branch.  # noqa: E501
        :type: list[int]
        """
        if merged_branch_ids is None:
            raise ValueError("Invalid value for `merged_branch_ids`, must not be `None`")  # noqa: E501

        self._merged_branch_ids = merged_branch_ids

    @property
    def id(self):
        """Gets the id of this Branch.  # noqa: E501

        The unique ID of the Branch.  # noqa: E501

        :return: The id of this Branch.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Branch.

        The unique ID of the Branch.  # noqa: E501

        :param id: The id of this Branch.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this Branch.  # noqa: E501

        The URL of the Branch.  # noqa: E501

        :return: The url of this Branch.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Branch.

        The URL of the Branch.  # noqa: E501

        :param url: The url of this Branch.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def repository_id(self):
        """Gets the repository_id of this Branch.  # noqa: E501

        The ID of the Repository that contains the Branch.  # noqa: E501

        :return: The repository_id of this Branch.  # noqa: E501
        :rtype: int
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this Branch.

        The ID of the Repository that contains the Branch.  # noqa: E501

        :param repository_id: The repository_id of this Branch.  # noqa: E501
        :type: int
        """
        if repository_id is None:
            raise ValueError("Invalid value for `repository_id`, must not be `None`")  # noqa: E501

        self._repository_id = repository_id

    @property
    def created_at(self):
        """Gets the created_at of this Branch.  # noqa: E501

        The time/date the Branch was created.  # noqa: E501

        :return: The created_at of this Branch.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Branch.

        The time/date the Branch was created.  # noqa: E501

        :param created_at: The created_at of this Branch.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Branch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Branch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
