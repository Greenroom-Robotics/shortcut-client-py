# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateLabelParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'color': 'str',
        'external_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'color': 'color',
        'external_id': 'external_id'
    }

    def __init__(self, name=None, description=None, color=None, external_id=None):  # noqa: E501
        """CreateLabelParams - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._color = None
        self._external_id = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if color is not None:
            self.color = color
        if external_id is not None:
            self.external_id = external_id

    @property
    def name(self):
        """Gets the name of this CreateLabelParams.  # noqa: E501

        The name of the new Label.  # noqa: E501

        :return: The name of this CreateLabelParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLabelParams.

        The name of the new Label.  # noqa: E501

        :param name: The name of this CreateLabelParams.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateLabelParams.  # noqa: E501

        The description of the new Label.  # noqa: E501

        :return: The description of this CreateLabelParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLabelParams.

        The description of the new Label.  # noqa: E501

        :param description: The description of this CreateLabelParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def color(self):
        """Gets the color of this CreateLabelParams.  # noqa: E501

        The hex color to be displayed with the Label (for example, \"#ff0000\").  # noqa: E501

        :return: The color of this CreateLabelParams.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CreateLabelParams.

        The hex color to be displayed with the Label (for example, \"#ff0000\").  # noqa: E501

        :param color: The color of this CreateLabelParams.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def external_id(self):
        """Gets the external_id of this CreateLabelParams.  # noqa: E501

        This field can be set to another unique ID. In the case that the Label has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :return: The external_id of this CreateLabelParams.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateLabelParams.

        This field can be set to another unique ID. In the case that the Label has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :param external_id: The external_id of this CreateLabelParams.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateLabelParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLabelParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
