# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'archived': 'bool',
        'days_to_thermometer': 'int',
        'color': 'str',
        'name': 'str',
        'follower_ids': 'list[str]',
        'show_thermometer': 'bool',
        'team_id': 'int',
        'abbreviation': 'str'
    }

    attribute_map = {
        'description': 'description',
        'archived': 'archived',
        'days_to_thermometer': 'days_to_thermometer',
        'color': 'color',
        'name': 'name',
        'follower_ids': 'follower_ids',
        'show_thermometer': 'show_thermometer',
        'team_id': 'team_id',
        'abbreviation': 'abbreviation'
    }

    def __init__(self, description=None, archived=None, days_to_thermometer=None, color=None, name=None, follower_ids=None, show_thermometer=None, team_id=None, abbreviation=None):  # noqa: E501
        """UpdateProject - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._archived = None
        self._days_to_thermometer = None
        self._color = None
        self._name = None
        self._follower_ids = None
        self._show_thermometer = None
        self._team_id = None
        self._abbreviation = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if archived is not None:
            self.archived = archived
        if days_to_thermometer is not None:
            self.days_to_thermometer = days_to_thermometer
        if color is not None:
            self.color = color
        if name is not None:
            self.name = name
        if follower_ids is not None:
            self.follower_ids = follower_ids
        if show_thermometer is not None:
            self.show_thermometer = show_thermometer
        if team_id is not None:
            self.team_id = team_id
        if abbreviation is not None:
            self.abbreviation = abbreviation

    @property
    def description(self):
        """Gets the description of this UpdateProject.  # noqa: E501

        The Project's description.  # noqa: E501

        :return: The description of this UpdateProject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProject.

        The Project's description.  # noqa: E501

        :param description: The description of this UpdateProject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def archived(self):
        """Gets the archived of this UpdateProject.  # noqa: E501

        A true/false boolean indicating whether the Story is in archived state.  # noqa: E501

        :return: The archived of this UpdateProject.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this UpdateProject.

        A true/false boolean indicating whether the Story is in archived state.  # noqa: E501

        :param archived: The archived of this UpdateProject.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def days_to_thermometer(self):
        """Gets the days_to_thermometer of this UpdateProject.  # noqa: E501

        The number of days before the thermometer appears in the Story summary.  # noqa: E501

        :return: The days_to_thermometer of this UpdateProject.  # noqa: E501
        :rtype: int
        """
        return self._days_to_thermometer

    @days_to_thermometer.setter
    def days_to_thermometer(self, days_to_thermometer):
        """Sets the days_to_thermometer of this UpdateProject.

        The number of days before the thermometer appears in the Story summary.  # noqa: E501

        :param days_to_thermometer: The days_to_thermometer of this UpdateProject.  # noqa: E501
        :type: int
        """

        self._days_to_thermometer = days_to_thermometer

    @property
    def color(self):
        """Gets the color of this UpdateProject.  # noqa: E501

        The color that represents the Project in the UI.  # noqa: E501

        :return: The color of this UpdateProject.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this UpdateProject.

        The color that represents the Project in the UI.  # noqa: E501

        :param color: The color of this UpdateProject.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def name(self):
        """Gets the name of this UpdateProject.  # noqa: E501

        The Project's name.  # noqa: E501

        :return: The name of this UpdateProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProject.

        The Project's name.  # noqa: E501

        :param name: The name of this UpdateProject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def follower_ids(self):
        """Gets the follower_ids of this UpdateProject.  # noqa: E501

        An array of UUIDs for any Members you want to add as Followers.  # noqa: E501

        :return: The follower_ids of this UpdateProject.  # noqa: E501
        :rtype: list[str]
        """
        return self._follower_ids

    @follower_ids.setter
    def follower_ids(self, follower_ids):
        """Sets the follower_ids of this UpdateProject.

        An array of UUIDs for any Members you want to add as Followers.  # noqa: E501

        :param follower_ids: The follower_ids of this UpdateProject.  # noqa: E501
        :type: list[str]
        """

        self._follower_ids = follower_ids

    @property
    def show_thermometer(self):
        """Gets the show_thermometer of this UpdateProject.  # noqa: E501

        Configuration to enable or disable thermometers in the Story summary.  # noqa: E501

        :return: The show_thermometer of this UpdateProject.  # noqa: E501
        :rtype: bool
        """
        return self._show_thermometer

    @show_thermometer.setter
    def show_thermometer(self, show_thermometer):
        """Sets the show_thermometer of this UpdateProject.

        Configuration to enable or disable thermometers in the Story summary.  # noqa: E501

        :param show_thermometer: The show_thermometer of this UpdateProject.  # noqa: E501
        :type: bool
        """

        self._show_thermometer = show_thermometer

    @property
    def team_id(self):
        """Gets the team_id of this UpdateProject.  # noqa: E501

        The ID of the team the project belongs to.  # noqa: E501

        :return: The team_id of this UpdateProject.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this UpdateProject.

        The ID of the team the project belongs to.  # noqa: E501

        :param team_id: The team_id of this UpdateProject.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def abbreviation(self):
        """Gets the abbreviation of this UpdateProject.  # noqa: E501

        The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.  # noqa: E501

        :return: The abbreviation of this UpdateProject.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this UpdateProject.

        The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.  # noqa: E501

        :param abbreviation: The abbreviation of this UpdateProject.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
