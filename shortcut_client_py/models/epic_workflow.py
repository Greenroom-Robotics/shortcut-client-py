# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EpicWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_type': 'str',
        'id': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'default_epic_state_id': 'int',
        'epic_states': 'list[EpicState]'
    }

    attribute_map = {
        'entity_type': 'entity_type',
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'default_epic_state_id': 'default_epic_state_id',
        'epic_states': 'epic_states'
    }

    def __init__(self, entity_type=None, id=None, created_at=None, updated_at=None, default_epic_state_id=None, epic_states=None):  # noqa: E501
        """EpicWorkflow - a model defined in Swagger"""  # noqa: E501
        self._entity_type = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._default_epic_state_id = None
        self._epic_states = None
        self.discriminator = None
        self.entity_type = entity_type
        self.id = id
        self.created_at = created_at
        self.updated_at = updated_at
        self.default_epic_state_id = default_epic_state_id
        self.epic_states = epic_states

    @property
    def entity_type(self):
        """Gets the entity_type of this EpicWorkflow.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this EpicWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EpicWorkflow.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this EpicWorkflow.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this EpicWorkflow.  # noqa: E501

        The unique ID of the Epic Workflow.  # noqa: E501

        :return: The id of this EpicWorkflow.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpicWorkflow.

        The unique ID of the Epic Workflow.  # noqa: E501

        :param id: The id of this EpicWorkflow.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this EpicWorkflow.  # noqa: E501

        The date the Epic Workflow was created.  # noqa: E501

        :return: The created_at of this EpicWorkflow.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EpicWorkflow.

        The date the Epic Workflow was created.  # noqa: E501

        :param created_at: The created_at of this EpicWorkflow.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EpicWorkflow.  # noqa: E501

        The date the Epic Workflow was updated.  # noqa: E501

        :return: The updated_at of this EpicWorkflow.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EpicWorkflow.

        The date the Epic Workflow was updated.  # noqa: E501

        :param updated_at: The updated_at of this EpicWorkflow.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def default_epic_state_id(self):
        """Gets the default_epic_state_id of this EpicWorkflow.  # noqa: E501

        The unique ID of the default Epic State that new Epics are assigned by default.  # noqa: E501

        :return: The default_epic_state_id of this EpicWorkflow.  # noqa: E501
        :rtype: int
        """
        return self._default_epic_state_id

    @default_epic_state_id.setter
    def default_epic_state_id(self, default_epic_state_id):
        """Sets the default_epic_state_id of this EpicWorkflow.

        The unique ID of the default Epic State that new Epics are assigned by default.  # noqa: E501

        :param default_epic_state_id: The default_epic_state_id of this EpicWorkflow.  # noqa: E501
        :type: int
        """
        if default_epic_state_id is None:
            raise ValueError("Invalid value for `default_epic_state_id`, must not be `None`")  # noqa: E501

        self._default_epic_state_id = default_epic_state_id

    @property
    def epic_states(self):
        """Gets the epic_states of this EpicWorkflow.  # noqa: E501

        A map of the Epic States in this Epic Workflow.  # noqa: E501

        :return: The epic_states of this EpicWorkflow.  # noqa: E501
        :rtype: list[EpicState]
        """
        return self._epic_states

    @epic_states.setter
    def epic_states(self, epic_states):
        """Sets the epic_states of this EpicWorkflow.

        A map of the Epic States in this Epic Workflow.  # noqa: E501

        :param epic_states: The epic_states of this EpicWorkflow.  # noqa: E501
        :type: list[EpicState]
        """
        if epic_states is None:
            raise ValueError("Invalid value for `epic_states`, must not be `None`")  # noqa: E501

        self._epic_states = epic_states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpicWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpicWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
