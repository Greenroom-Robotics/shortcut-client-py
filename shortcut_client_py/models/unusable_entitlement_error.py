# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnusableEntitlementError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reason_tag': 'str',
        'entitlement_tag': 'str',
        'message': 'str'
    }

    attribute_map = {
        'reason_tag': 'reason_tag',
        'entitlement_tag': 'entitlement_tag',
        'message': 'message'
    }

    def __init__(self, reason_tag=None, entitlement_tag=None, message=None):  # noqa: E501
        """UnusableEntitlementError - a model defined in Swagger"""  # noqa: E501
        self._reason_tag = None
        self._entitlement_tag = None
        self._message = None
        self.discriminator = None
        self.reason_tag = reason_tag
        self.entitlement_tag = entitlement_tag
        self.message = message

    @property
    def reason_tag(self):
        """Gets the reason_tag of this UnusableEntitlementError.  # noqa: E501

        The tag for violating an entitlement action.  # noqa: E501

        :return: The reason_tag of this UnusableEntitlementError.  # noqa: E501
        :rtype: str
        """
        return self._reason_tag

    @reason_tag.setter
    def reason_tag(self, reason_tag):
        """Sets the reason_tag of this UnusableEntitlementError.

        The tag for violating an entitlement action.  # noqa: E501

        :param reason_tag: The reason_tag of this UnusableEntitlementError.  # noqa: E501
        :type: str
        """
        if reason_tag is None:
            raise ValueError("Invalid value for `reason_tag`, must not be `None`")  # noqa: E501
        allowed_values = ["entitlement-violation"]  # noqa: E501
        if reason_tag not in allowed_values:
            raise ValueError(
                "Invalid value for `reason_tag` ({0}), must be one of {1}"  # noqa: E501
                .format(reason_tag, allowed_values)
            )

        self._reason_tag = reason_tag

    @property
    def entitlement_tag(self):
        """Gets the entitlement_tag of this UnusableEntitlementError.  # noqa: E501

        Short tag describing the unusable entitlement action taken by the user.  # noqa: E501

        :return: The entitlement_tag of this UnusableEntitlementError.  # noqa: E501
        :rtype: str
        """
        return self._entitlement_tag

    @entitlement_tag.setter
    def entitlement_tag(self, entitlement_tag):
        """Sets the entitlement_tag of this UnusableEntitlementError.

        Short tag describing the unusable entitlement action taken by the user.  # noqa: E501

        :param entitlement_tag: The entitlement_tag of this UnusableEntitlementError.  # noqa: E501
        :type: str
        """
        if entitlement_tag is None:
            raise ValueError("Invalid value for `entitlement_tag`, must not be `None`")  # noqa: E501

        self._entitlement_tag = entitlement_tag

    @property
    def message(self):
        """Gets the message of this UnusableEntitlementError.  # noqa: E501

        Message displayed to the user on why their action failed.  # noqa: E501

        :return: The message of this UnusableEntitlementError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UnusableEntitlementError.

        Message displayed to the user on why their action failed.  # noqa: E501

        :param message: The message of this UnusableEntitlementError.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnusableEntitlementError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnusableEntitlementError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
