# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateMilestone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'started_at_override': 'datetime',
        'completed_at_override': 'datetime',
        'categories': 'list[CreateCategoryParams]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'started_at_override': 'started_at_override',
        'completed_at_override': 'completed_at_override',
        'categories': 'categories'
    }

    def __init__(self, name=None, description=None, state=None, started_at_override=None, completed_at_override=None, categories=None):  # noqa: E501
        """CreateMilestone - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._state = None
        self._started_at_override = None
        self._completed_at_override = None
        self._categories = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if started_at_override is not None:
            self.started_at_override = started_at_override
        if completed_at_override is not None:
            self.completed_at_override = completed_at_override
        if categories is not None:
            self.categories = categories

    @property
    def name(self):
        """Gets the name of this CreateMilestone.  # noqa: E501

        The name of the Milestone.  # noqa: E501

        :return: The name of this CreateMilestone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateMilestone.

        The name of the Milestone.  # noqa: E501

        :param name: The name of this CreateMilestone.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateMilestone.  # noqa: E501

        The Milestone's description.  # noqa: E501

        :return: The description of this CreateMilestone.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMilestone.

        The Milestone's description.  # noqa: E501

        :param description: The description of this CreateMilestone.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this CreateMilestone.  # noqa: E501

        The workflow state that the Milestone is in.  # noqa: E501

        :return: The state of this CreateMilestone.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateMilestone.

        The workflow state that the Milestone is in.  # noqa: E501

        :param state: The state of this CreateMilestone.  # noqa: E501
        :type: str
        """
        allowed_values = ["in progress", "to do", "done"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def started_at_override(self):
        """Gets the started_at_override of this CreateMilestone.  # noqa: E501

        A manual override for the time/date the Milestone was started.  # noqa: E501

        :return: The started_at_override of this CreateMilestone.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at_override

    @started_at_override.setter
    def started_at_override(self, started_at_override):
        """Sets the started_at_override of this CreateMilestone.

        A manual override for the time/date the Milestone was started.  # noqa: E501

        :param started_at_override: The started_at_override of this CreateMilestone.  # noqa: E501
        :type: datetime
        """

        self._started_at_override = started_at_override

    @property
    def completed_at_override(self):
        """Gets the completed_at_override of this CreateMilestone.  # noqa: E501

        A manual override for the time/date the Milestone was completed.  # noqa: E501

        :return: The completed_at_override of this CreateMilestone.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at_override

    @completed_at_override.setter
    def completed_at_override(self, completed_at_override):
        """Sets the completed_at_override of this CreateMilestone.

        A manual override for the time/date the Milestone was completed.  # noqa: E501

        :param completed_at_override: The completed_at_override of this CreateMilestone.  # noqa: E501
        :type: datetime
        """

        self._completed_at_override = completed_at_override

    @property
    def categories(self):
        """Gets the categories of this CreateMilestone.  # noqa: E501

        An array of IDs of Categories attached to the Milestone.  # noqa: E501

        :return: The categories of this CreateMilestone.  # noqa: E501
        :rtype: list[CreateCategoryParams]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CreateMilestone.

        An array of IDs of Categories attached to the Milestone.  # noqa: E501

        :param categories: The categories of this CreateMilestone.  # noqa: E501
        :type: list[CreateCategoryParams]
        """

        self._categories = categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMilestone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMilestone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
