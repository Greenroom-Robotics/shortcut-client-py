# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Member(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'str',
        'entity_type': 'str',
        'disabled': 'bool',
        'global_id': 'str',
        'state': 'str',
        'updated_at': 'datetime',
        'created_without_invite': 'bool',
        'group_ids': 'list[str]',
        'id': 'str',
        'profile': 'Profile',
        'created_at': 'datetime',
        'replaced_by': 'str'
    }

    attribute_map = {
        'role': 'role',
        'entity_type': 'entity_type',
        'disabled': 'disabled',
        'global_id': 'global_id',
        'state': 'state',
        'updated_at': 'updated_at',
        'created_without_invite': 'created_without_invite',
        'group_ids': 'group_ids',
        'id': 'id',
        'profile': 'profile',
        'created_at': 'created_at',
        'replaced_by': 'replaced_by'
    }

    def __init__(self, role=None, entity_type=None, disabled=None, global_id=None, state=None, updated_at=None, created_without_invite=None, group_ids=None, id=None, profile=None, created_at=None, replaced_by=None):  # noqa: E501
        """Member - a model defined in Swagger"""  # noqa: E501
        self._role = None
        self._entity_type = None
        self._disabled = None
        self._global_id = None
        self._state = None
        self._updated_at = None
        self._created_without_invite = None
        self._group_ids = None
        self._id = None
        self._profile = None
        self._created_at = None
        self._replaced_by = None
        self.discriminator = None
        self.role = role
        self.entity_type = entity_type
        self.disabled = disabled
        self.global_id = global_id
        self.state = state
        self.updated_at = updated_at
        self.created_without_invite = created_without_invite
        self.group_ids = group_ids
        self.id = id
        self.profile = profile
        self.created_at = created_at
        if replaced_by is not None:
            self.replaced_by = replaced_by

    @property
    def role(self):
        """Gets the role of this Member.  # noqa: E501

        The Member's role in the Workspace.  # noqa: E501

        :return: The role of this Member.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Member.

        The Member's role in the Workspace.  # noqa: E501

        :param role: The role of this Member.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def entity_type(self):
        """Gets the entity_type of this Member.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this Member.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Member.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this Member.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def disabled(self):
        """Gets the disabled of this Member.  # noqa: E501

        True/false boolean indicating whether the Member has been disabled within the Workspace.  # noqa: E501

        :return: The disabled of this Member.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Member.

        True/false boolean indicating whether the Member has been disabled within the Workspace.  # noqa: E501

        :param disabled: The disabled of this Member.  # noqa: E501
        :type: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")  # noqa: E501

        self._disabled = disabled

    @property
    def global_id(self):
        """Gets the global_id of this Member.  # noqa: E501


        :return: The global_id of this Member.  # noqa: E501
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this Member.


        :param global_id: The global_id of this Member.  # noqa: E501
        :type: str
        """
        if global_id is None:
            raise ValueError("Invalid value for `global_id`, must not be `None`")  # noqa: E501

        self._global_id = global_id

    @property
    def state(self):
        """Gets the state of this Member.  # noqa: E501

        The user state, one of partial, full, disabled, or imported.  A partial user is disabled, has no means to log in, and is not an import user.  A full user is enabled and has a means to log in.  A disabled user is disabled and has a means to log in.  An import user is disabled, has no means to log in, and is marked as an import user.  # noqa: E501

        :return: The state of this Member.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Member.

        The user state, one of partial, full, disabled, or imported.  A partial user is disabled, has no means to log in, and is not an import user.  A full user is enabled and has a means to log in.  A disabled user is disabled and has a means to log in.  An import user is disabled, has no means to log in, and is marked as an import user.  # noqa: E501

        :param state: The state of this Member.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["partial", "full", "disabled", "imported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this Member.  # noqa: E501

        The time/date the Member was last updated.  # noqa: E501

        :return: The updated_at of this Member.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Member.

        The time/date the Member was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Member.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def created_without_invite(self):
        """Gets the created_without_invite of this Member.  # noqa: E501

        Whether this member was created as a placeholder entity.  # noqa: E501

        :return: The created_without_invite of this Member.  # noqa: E501
        :rtype: bool
        """
        return self._created_without_invite

    @created_without_invite.setter
    def created_without_invite(self, created_without_invite):
        """Sets the created_without_invite of this Member.

        Whether this member was created as a placeholder entity.  # noqa: E501

        :param created_without_invite: The created_without_invite of this Member.  # noqa: E501
        :type: bool
        """
        if created_without_invite is None:
            raise ValueError("Invalid value for `created_without_invite`, must not be `None`")  # noqa: E501

        self._created_without_invite = created_without_invite

    @property
    def group_ids(self):
        """Gets the group_ids of this Member.  # noqa: E501

        The Member's group ids  # noqa: E501

        :return: The group_ids of this Member.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this Member.

        The Member's group ids  # noqa: E501

        :param group_ids: The group_ids of this Member.  # noqa: E501
        :type: list[str]
        """
        if group_ids is None:
            raise ValueError("Invalid value for `group_ids`, must not be `None`")  # noqa: E501

        self._group_ids = group_ids

    @property
    def id(self):
        """Gets the id of this Member.  # noqa: E501

        The Member's ID in Shortcut.  # noqa: E501

        :return: The id of this Member.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Member.

        The Member's ID in Shortcut.  # noqa: E501

        :param id: The id of this Member.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def profile(self):
        """Gets the profile of this Member.  # noqa: E501


        :return: The profile of this Member.  # noqa: E501
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Member.


        :param profile: The profile of this Member.  # noqa: E501
        :type: Profile
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def created_at(self):
        """Gets the created_at of this Member.  # noqa: E501

        The time/date the Member was created.  # noqa: E501

        :return: The created_at of this Member.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Member.

        The time/date the Member was created.  # noqa: E501

        :param created_at: The created_at of this Member.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def replaced_by(self):
        """Gets the replaced_by of this Member.  # noqa: E501

        The id of the member that replaces this one when merged.  # noqa: E501

        :return: The replaced_by of this Member.  # noqa: E501
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this Member.

        The id of the member that replaces this one when merged.  # noqa: E501

        :param replaced_by: The replaced_by of this Member.  # noqa: E501
        :type: str
        """

        self._replaced_by = replaced_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Member, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Member):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
