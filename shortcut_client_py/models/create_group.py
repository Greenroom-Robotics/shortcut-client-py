# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'member_ids': 'list[str]',
        'workflow_ids': 'list[int]',
        'name': 'str',
        'mention_name': 'str',
        'color': 'str',
        'color_key': 'str',
        'display_icon_id': 'str'
    }

    attribute_map = {
        'description': 'description',
        'member_ids': 'member_ids',
        'workflow_ids': 'workflow_ids',
        'name': 'name',
        'mention_name': 'mention_name',
        'color': 'color',
        'color_key': 'color_key',
        'display_icon_id': 'display_icon_id'
    }

    def __init__(self, description=None, member_ids=None, workflow_ids=None, name=None, mention_name=None, color=None, color_key=None, display_icon_id=None):  # noqa: E501
        """CreateGroup - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._member_ids = None
        self._workflow_ids = None
        self._name = None
        self._mention_name = None
        self._color = None
        self._color_key = None
        self._display_icon_id = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if member_ids is not None:
            self.member_ids = member_ids
        if workflow_ids is not None:
            self.workflow_ids = workflow_ids
        self.name = name
        self.mention_name = mention_name
        if color is not None:
            self.color = color
        if color_key is not None:
            self.color_key = color_key
        if display_icon_id is not None:
            self.display_icon_id = display_icon_id

    @property
    def description(self):
        """Gets the description of this CreateGroup.  # noqa: E501

        The description of the Group.  # noqa: E501

        :return: The description of this CreateGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateGroup.

        The description of the Group.  # noqa: E501

        :param description: The description of this CreateGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def member_ids(self):
        """Gets the member_ids of this CreateGroup.  # noqa: E501

        The Member ids to add to this Group.  # noqa: E501

        :return: The member_ids of this CreateGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_ids

    @member_ids.setter
    def member_ids(self, member_ids):
        """Sets the member_ids of this CreateGroup.

        The Member ids to add to this Group.  # noqa: E501

        :param member_ids: The member_ids of this CreateGroup.  # noqa: E501
        :type: list[str]
        """

        self._member_ids = member_ids

    @property
    def workflow_ids(self):
        """Gets the workflow_ids of this CreateGroup.  # noqa: E501

        The Workflow ids to add to the Group.  # noqa: E501

        :return: The workflow_ids of this CreateGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._workflow_ids

    @workflow_ids.setter
    def workflow_ids(self, workflow_ids):
        """Sets the workflow_ids of this CreateGroup.

        The Workflow ids to add to the Group.  # noqa: E501

        :param workflow_ids: The workflow_ids of this CreateGroup.  # noqa: E501
        :type: list[int]
        """

        self._workflow_ids = workflow_ids

    @property
    def name(self):
        """Gets the name of this CreateGroup.  # noqa: E501

        The name of this Group.  # noqa: E501

        :return: The name of this CreateGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateGroup.

        The name of this Group.  # noqa: E501

        :param name: The name of this CreateGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mention_name(self):
        """Gets the mention_name of this CreateGroup.  # noqa: E501

        The mention name of this Group.  # noqa: E501

        :return: The mention_name of this CreateGroup.  # noqa: E501
        :rtype: str
        """
        return self._mention_name

    @mention_name.setter
    def mention_name(self, mention_name):
        """Sets the mention_name of this CreateGroup.

        The mention name of this Group.  # noqa: E501

        :param mention_name: The mention_name of this CreateGroup.  # noqa: E501
        :type: str
        """
        if mention_name is None:
            raise ValueError("Invalid value for `mention_name`, must not be `None`")  # noqa: E501

        self._mention_name = mention_name

    @property
    def color(self):
        """Gets the color of this CreateGroup.  # noqa: E501

        The color you wish to use for the Group in the system.  # noqa: E501

        :return: The color of this CreateGroup.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CreateGroup.

        The color you wish to use for the Group in the system.  # noqa: E501

        :param color: The color of this CreateGroup.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def color_key(self):
        """Gets the color_key of this CreateGroup.  # noqa: E501

        The color key you wish to use for the Group in the system.  # noqa: E501

        :return: The color_key of this CreateGroup.  # noqa: E501
        :rtype: str
        """
        return self._color_key

    @color_key.setter
    def color_key(self, color_key):
        """Sets the color_key of this CreateGroup.

        The color key you wish to use for the Group in the system.  # noqa: E501

        :param color_key: The color_key of this CreateGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["blue", "purple", "midnight-blue", "orange", "yellow-green", "brass", "gray", "fuchsia", "yellow", "pink", "sky-blue", "green", "red", "black", "slate", "turquoise"]  # noqa: E501
        if color_key not in allowed_values:
            raise ValueError(
                "Invalid value for `color_key` ({0}), must be one of {1}"  # noqa: E501
                .format(color_key, allowed_values)
            )

        self._color_key = color_key

    @property
    def display_icon_id(self):
        """Gets the display_icon_id of this CreateGroup.  # noqa: E501

        The Icon id for the avatar of this Group.  # noqa: E501

        :return: The display_icon_id of this CreateGroup.  # noqa: E501
        :rtype: str
        """
        return self._display_icon_id

    @display_icon_id.setter
    def display_icon_id(self, display_icon_id):
        """Sets the display_icon_id of this CreateGroup.

        The Icon id for the avatar of this Group.  # noqa: E501

        :param display_icon_id: The display_icon_id of this CreateGroup.  # noqa: E501
        :type: str
        """

        self._display_icon_id = display_icon_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
