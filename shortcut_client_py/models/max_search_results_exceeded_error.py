# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaxSearchResultsExceededError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'message': 'str',
        'maximum_results': 'int'
    }

    attribute_map = {
        'error': 'error',
        'message': 'message',
        'maximum_results': 'maximum-results'
    }

    def __init__(self, error=None, message=None, maximum_results=None):  # noqa: E501
        """MaxSearchResultsExceededError - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._message = None
        self._maximum_results = None
        self.discriminator = None
        self.error = error
        self.message = message
        self.maximum_results = maximum_results

    @property
    def error(self):
        """Gets the error of this MaxSearchResultsExceededError.  # noqa: E501

        The name for this type of error, `maximum-results-exceeded`  # noqa: E501

        :return: The error of this MaxSearchResultsExceededError.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this MaxSearchResultsExceededError.

        The name for this type of error, `maximum-results-exceeded`  # noqa: E501

        :param error: The error of this MaxSearchResultsExceededError.  # noqa: E501
        :type: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501
        allowed_values = ["maximum-results-exceeded"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"  # noqa: E501
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def message(self):
        """Gets the message of this MaxSearchResultsExceededError.  # noqa: E501

        An explanatory message: \"A maximum of 1000 search results are supported.\"  # noqa: E501

        :return: The message of this MaxSearchResultsExceededError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MaxSearchResultsExceededError.

        An explanatory message: \"A maximum of 1000 search results are supported.\"  # noqa: E501

        :param message: The message of this MaxSearchResultsExceededError.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def maximum_results(self):
        """Gets the maximum_results of this MaxSearchResultsExceededError.  # noqa: E501

        The maximum number of search results supported, `1000`  # noqa: E501

        :return: The maximum_results of this MaxSearchResultsExceededError.  # noqa: E501
        :rtype: int
        """
        return self._maximum_results

    @maximum_results.setter
    def maximum_results(self, maximum_results):
        """Sets the maximum_results of this MaxSearchResultsExceededError.

        The maximum number of search results supported, `1000`  # noqa: E501

        :param maximum_results: The maximum_results of this MaxSearchResultsExceededError.  # noqa: E501
        :type: int
        """
        if maximum_results is None:
            raise ValueError("Invalid value for `maximum_results`, must not be `None`")  # noqa: E501
        allowed_values = [1000]  # noqa: E501
        if maximum_results not in allowed_values:
            raise ValueError(
                "Invalid value for `maximum_results` ({0}), must be one of {1}"  # noqa: E501
                .format(maximum_results, allowed_values)
            )

        self._maximum_results = maximum_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaxSearchResultsExceededError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaxSearchResultsExceededError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
