# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class History(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changed_at': 'str',
        'primary_id': 'int',
        'references': 'list[object]',
        'actions': 'list[object]',
        'member_id': 'str',
        'external_id': 'str',
        'id': 'str',
        'version': 'str',
        'webhook_id': 'str'
    }

    attribute_map = {
        'changed_at': 'changed_at',
        'primary_id': 'primary_id',
        'references': 'references',
        'actions': 'actions',
        'member_id': 'member_id',
        'external_id': 'external_id',
        'id': 'id',
        'version': 'version',
        'webhook_id': 'webhook_id'
    }

    def __init__(self, changed_at=None, primary_id=None, references=None, actions=None, member_id=None, external_id=None, id=None, version=None, webhook_id=None):  # noqa: E501
        """History - a model defined in Swagger"""  # noqa: E501
        self._changed_at = None
        self._primary_id = None
        self._references = None
        self._actions = None
        self._member_id = None
        self._external_id = None
        self._id = None
        self._version = None
        self._webhook_id = None
        self.discriminator = None
        self.changed_at = changed_at
        if primary_id is not None:
            self.primary_id = primary_id
        if references is not None:
            self.references = references
        self.actions = actions
        if member_id is not None:
            self.member_id = member_id
        if external_id is not None:
            self.external_id = external_id
        self.id = id
        self.version = version
        if webhook_id is not None:
            self.webhook_id = webhook_id

    @property
    def changed_at(self):
        """Gets the changed_at of this History.  # noqa: E501

        The date when the change occurred.  # noqa: E501

        :return: The changed_at of this History.  # noqa: E501
        :rtype: str
        """
        return self._changed_at

    @changed_at.setter
    def changed_at(self, changed_at):
        """Sets the changed_at of this History.

        The date when the change occurred.  # noqa: E501

        :param changed_at: The changed_at of this History.  # noqa: E501
        :type: str
        """
        if changed_at is None:
            raise ValueError("Invalid value for `changed_at`, must not be `None`")  # noqa: E501

        self._changed_at = changed_at

    @property
    def primary_id(self):
        """Gets the primary_id of this History.  # noqa: E501

        The ID of the primary entity that has changed, if applicable.  # noqa: E501

        :return: The primary_id of this History.  # noqa: E501
        :rtype: int
        """
        return self._primary_id

    @primary_id.setter
    def primary_id(self, primary_id):
        """Sets the primary_id of this History.

        The ID of the primary entity that has changed, if applicable.  # noqa: E501

        :param primary_id: The primary_id of this History.  # noqa: E501
        :type: int
        """

        self._primary_id = primary_id

    @property
    def references(self):
        """Gets the references of this History.  # noqa: E501

        An array of objects affected by the change. Reference objects provide basic information for the entities reference in the history actions. Some have specific fields, but they always contain an id, entity_type, and a name.  # noqa: E501

        :return: The references of this History.  # noqa: E501
        :rtype: list[object]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this History.

        An array of objects affected by the change. Reference objects provide basic information for the entities reference in the history actions. Some have specific fields, but they always contain an id, entity_type, and a name.  # noqa: E501

        :param references: The references of this History.  # noqa: E501
        :type: list[object]
        """

        self._references = references

    @property
    def actions(self):
        """Gets the actions of this History.  # noqa: E501

        An array of actions that were performed for the change.  # noqa: E501

        :return: The actions of this History.  # noqa: E501
        :rtype: list[object]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this History.

        An array of actions that were performed for the change.  # noqa: E501

        :param actions: The actions of this History.  # noqa: E501
        :type: list[object]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")  # noqa: E501

        self._actions = actions

    @property
    def member_id(self):
        """Gets the member_id of this History.  # noqa: E501

        The ID of the member who performed the change.  # noqa: E501

        :return: The member_id of this History.  # noqa: E501
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this History.

        The ID of the member who performed the change.  # noqa: E501

        :param member_id: The member_id of this History.  # noqa: E501
        :type: str
        """

        self._member_id = member_id

    @property
    def external_id(self):
        """Gets the external_id of this History.  # noqa: E501

        The ID of the webhook that handled the change.  # noqa: E501

        :return: The external_id of this History.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this History.

        The ID of the webhook that handled the change.  # noqa: E501

        :param external_id: The external_id of this History.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this History.  # noqa: E501

        The ID representing the change for the story.  # noqa: E501

        :return: The id of this History.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this History.

        The ID representing the change for the story.  # noqa: E501

        :param id: The id of this History.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version(self):
        """Gets the version of this History.  # noqa: E501

        The version of the change format.  # noqa: E501

        :return: The version of this History.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this History.

        The version of the change format.  # noqa: E501

        :param version: The version of this History.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        allowed_values = ["v1"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"  # noqa: E501
                .format(version, allowed_values)
            )

        self._version = version

    @property
    def webhook_id(self):
        """Gets the webhook_id of this History.  # noqa: E501

        The ID of the webhook that handled the change.  # noqa: E501

        :return: The webhook_id of this History.  # noqa: E501
        :rtype: str
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this History.

        The ID of the webhook that handled the change.  # noqa: E501

        :param webhook_id: The webhook_id of this History.  # noqa: E501
        :type: str
        """

        self._webhook_id = webhook_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(History, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, History):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
