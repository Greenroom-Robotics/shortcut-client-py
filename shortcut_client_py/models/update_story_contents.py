# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateStoryContents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'entity_type': 'str',
        'labels': 'list[CreateLabelParams]',
        'story_type': 'str',
        'custom_fields': 'list[CustomFieldValueParams]',
        'linked_files': 'list[LinkedFile]',
        'file_ids': 'list[int]',
        'name': 'str',
        'epic_id': 'int',
        'external_links': 'list[str]',
        'iteration_id': 'int',
        'tasks': 'list[EntityTemplateTask]',
        'label_ids': 'list[int]',
        'group_id': 'str',
        'workflow_state_id': 'int',
        'follower_ids': 'list[str]',
        'owner_ids': 'list[str]',
        'estimate': 'int',
        'files': 'list[UploadedFile]',
        'project_id': 'int',
        'linked_file_ids': 'list[int]',
        'deadline': 'datetime'
    }

    attribute_map = {
        'description': 'description',
        'entity_type': 'entity_type',
        'labels': 'labels',
        'story_type': 'story_type',
        'custom_fields': 'custom_fields',
        'linked_files': 'linked_files',
        'file_ids': 'file_ids',
        'name': 'name',
        'epic_id': 'epic_id',
        'external_links': 'external_links',
        'iteration_id': 'iteration_id',
        'tasks': 'tasks',
        'label_ids': 'label_ids',
        'group_id': 'group_id',
        'workflow_state_id': 'workflow_state_id',
        'follower_ids': 'follower_ids',
        'owner_ids': 'owner_ids',
        'estimate': 'estimate',
        'files': 'files',
        'project_id': 'project_id',
        'linked_file_ids': 'linked_file_ids',
        'deadline': 'deadline'
    }

    def __init__(self, description=None, entity_type=None, labels=None, story_type=None, custom_fields=None, linked_files=None, file_ids=None, name=None, epic_id=None, external_links=None, iteration_id=None, tasks=None, label_ids=None, group_id=None, workflow_state_id=None, follower_ids=None, owner_ids=None, estimate=None, files=None, project_id=None, linked_file_ids=None, deadline=None):  # noqa: E501
        """UpdateStoryContents - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._entity_type = None
        self._labels = None
        self._story_type = None
        self._custom_fields = None
        self._linked_files = None
        self._file_ids = None
        self._name = None
        self._epic_id = None
        self._external_links = None
        self._iteration_id = None
        self._tasks = None
        self._label_ids = None
        self._group_id = None
        self._workflow_state_id = None
        self._follower_ids = None
        self._owner_ids = None
        self._estimate = None
        self._files = None
        self._project_id = None
        self._linked_file_ids = None
        self._deadline = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if entity_type is not None:
            self.entity_type = entity_type
        if labels is not None:
            self.labels = labels
        if story_type is not None:
            self.story_type = story_type
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if linked_files is not None:
            self.linked_files = linked_files
        if file_ids is not None:
            self.file_ids = file_ids
        if name is not None:
            self.name = name
        if epic_id is not None:
            self.epic_id = epic_id
        if external_links is not None:
            self.external_links = external_links
        if iteration_id is not None:
            self.iteration_id = iteration_id
        if tasks is not None:
            self.tasks = tasks
        if label_ids is not None:
            self.label_ids = label_ids
        if group_id is not None:
            self.group_id = group_id
        if workflow_state_id is not None:
            self.workflow_state_id = workflow_state_id
        if follower_ids is not None:
            self.follower_ids = follower_ids
        if owner_ids is not None:
            self.owner_ids = owner_ids
        if estimate is not None:
            self.estimate = estimate
        if files is not None:
            self.files = files
        if project_id is not None:
            self.project_id = project_id
        if linked_file_ids is not None:
            self.linked_file_ids = linked_file_ids
        if deadline is not None:
            self.deadline = deadline

    @property
    def description(self):
        """Gets the description of this UpdateStoryContents.  # noqa: E501

        The description of the story.  # noqa: E501

        :return: The description of this UpdateStoryContents.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateStoryContents.

        The description of the story.  # noqa: E501

        :param description: The description of this UpdateStoryContents.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity_type(self):
        """Gets the entity_type of this UpdateStoryContents.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this UpdateStoryContents.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this UpdateStoryContents.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this UpdateStoryContents.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def labels(self):
        """Gets the labels of this UpdateStoryContents.  # noqa: E501

        An array of labels to be populated by the template.  # noqa: E501

        :return: The labels of this UpdateStoryContents.  # noqa: E501
        :rtype: list[CreateLabelParams]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this UpdateStoryContents.

        An array of labels to be populated by the template.  # noqa: E501

        :param labels: The labels of this UpdateStoryContents.  # noqa: E501
        :type: list[CreateLabelParams]
        """

        self._labels = labels

    @property
    def story_type(self):
        """Gets the story_type of this UpdateStoryContents.  # noqa: E501

        The type of story (feature, bug, chore).  # noqa: E501

        :return: The story_type of this UpdateStoryContents.  # noqa: E501
        :rtype: str
        """
        return self._story_type

    @story_type.setter
    def story_type(self, story_type):
        """Sets the story_type of this UpdateStoryContents.

        The type of story (feature, bug, chore).  # noqa: E501

        :param story_type: The story_type of this UpdateStoryContents.  # noqa: E501
        :type: str
        """

        self._story_type = story_type

    @property
    def custom_fields(self):
        """Gets the custom_fields of this UpdateStoryContents.  # noqa: E501

        An array of maps specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.  # noqa: E501

        :return: The custom_fields of this UpdateStoryContents.  # noqa: E501
        :rtype: list[CustomFieldValueParams]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this UpdateStoryContents.

        An array of maps specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.  # noqa: E501

        :param custom_fields: The custom_fields of this UpdateStoryContents.  # noqa: E501
        :type: list[CustomFieldValueParams]
        """

        self._custom_fields = custom_fields

    @property
    def linked_files(self):
        """Gets the linked_files of this UpdateStoryContents.  # noqa: E501

        An array of linked files attached to the story.  # noqa: E501

        :return: The linked_files of this UpdateStoryContents.  # noqa: E501
        :rtype: list[LinkedFile]
        """
        return self._linked_files

    @linked_files.setter
    def linked_files(self, linked_files):
        """Sets the linked_files of this UpdateStoryContents.

        An array of linked files attached to the story.  # noqa: E501

        :param linked_files: The linked_files of this UpdateStoryContents.  # noqa: E501
        :type: list[LinkedFile]
        """

        self._linked_files = linked_files

    @property
    def file_ids(self):
        """Gets the file_ids of this UpdateStoryContents.  # noqa: E501

        An array of the attached file IDs to be populated.  # noqa: E501

        :return: The file_ids of this UpdateStoryContents.  # noqa: E501
        :rtype: list[int]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this UpdateStoryContents.

        An array of the attached file IDs to be populated.  # noqa: E501

        :param file_ids: The file_ids of this UpdateStoryContents.  # noqa: E501
        :type: list[int]
        """

        self._file_ids = file_ids

    @property
    def name(self):
        """Gets the name of this UpdateStoryContents.  # noqa: E501

        The name of the story.  # noqa: E501

        :return: The name of this UpdateStoryContents.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateStoryContents.

        The name of the story.  # noqa: E501

        :param name: The name of this UpdateStoryContents.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def epic_id(self):
        """Gets the epic_id of this UpdateStoryContents.  # noqa: E501

        The ID of the epic the to be populated.  # noqa: E501

        :return: The epic_id of this UpdateStoryContents.  # noqa: E501
        :rtype: int
        """
        return self._epic_id

    @epic_id.setter
    def epic_id(self, epic_id):
        """Sets the epic_id of this UpdateStoryContents.

        The ID of the epic the to be populated.  # noqa: E501

        :param epic_id: The epic_id of this UpdateStoryContents.  # noqa: E501
        :type: int
        """

        self._epic_id = epic_id

    @property
    def external_links(self):
        """Gets the external_links of this UpdateStoryContents.  # noqa: E501

        An array of external links to be populated.  # noqa: E501

        :return: The external_links of this UpdateStoryContents.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """Sets the external_links of this UpdateStoryContents.

        An array of external links to be populated.  # noqa: E501

        :param external_links: The external_links of this UpdateStoryContents.  # noqa: E501
        :type: list[str]
        """

        self._external_links = external_links

    @property
    def iteration_id(self):
        """Gets the iteration_id of this UpdateStoryContents.  # noqa: E501

        The ID of the iteration the to be populated.  # noqa: E501

        :return: The iteration_id of this UpdateStoryContents.  # noqa: E501
        :rtype: int
        """
        return self._iteration_id

    @iteration_id.setter
    def iteration_id(self, iteration_id):
        """Sets the iteration_id of this UpdateStoryContents.

        The ID of the iteration the to be populated.  # noqa: E501

        :param iteration_id: The iteration_id of this UpdateStoryContents.  # noqa: E501
        :type: int
        """

        self._iteration_id = iteration_id

    @property
    def tasks(self):
        """Gets the tasks of this UpdateStoryContents.  # noqa: E501

        An array of tasks to be populated by the template.  # noqa: E501

        :return: The tasks of this UpdateStoryContents.  # noqa: E501
        :rtype: list[EntityTemplateTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this UpdateStoryContents.

        An array of tasks to be populated by the template.  # noqa: E501

        :param tasks: The tasks of this UpdateStoryContents.  # noqa: E501
        :type: list[EntityTemplateTask]
        """

        self._tasks = tasks

    @property
    def label_ids(self):
        """Gets the label_ids of this UpdateStoryContents.  # noqa: E501

        An array of label ids attached to the story.  # noqa: E501

        :return: The label_ids of this UpdateStoryContents.  # noqa: E501
        :rtype: list[int]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this UpdateStoryContents.

        An array of label ids attached to the story.  # noqa: E501

        :param label_ids: The label_ids of this UpdateStoryContents.  # noqa: E501
        :type: list[int]
        """

        self._label_ids = label_ids

    @property
    def group_id(self):
        """Gets the group_id of this UpdateStoryContents.  # noqa: E501

        The ID of the group to be populated.  # noqa: E501

        :return: The group_id of this UpdateStoryContents.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this UpdateStoryContents.

        The ID of the group to be populated.  # noqa: E501

        :param group_id: The group_id of this UpdateStoryContents.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def workflow_state_id(self):
        """Gets the workflow_state_id of this UpdateStoryContents.  # noqa: E501

        The ID of the workflow state the story is currently in.  # noqa: E501

        :return: The workflow_state_id of this UpdateStoryContents.  # noqa: E501
        :rtype: int
        """
        return self._workflow_state_id

    @workflow_state_id.setter
    def workflow_state_id(self, workflow_state_id):
        """Sets the workflow_state_id of this UpdateStoryContents.

        The ID of the workflow state the story is currently in.  # noqa: E501

        :param workflow_state_id: The workflow_state_id of this UpdateStoryContents.  # noqa: E501
        :type: int
        """

        self._workflow_state_id = workflow_state_id

    @property
    def follower_ids(self):
        """Gets the follower_ids of this UpdateStoryContents.  # noqa: E501

        An array of UUIDs for any Members listed as Followers.  # noqa: E501

        :return: The follower_ids of this UpdateStoryContents.  # noqa: E501
        :rtype: list[str]
        """
        return self._follower_ids

    @follower_ids.setter
    def follower_ids(self, follower_ids):
        """Sets the follower_ids of this UpdateStoryContents.

        An array of UUIDs for any Members listed as Followers.  # noqa: E501

        :param follower_ids: The follower_ids of this UpdateStoryContents.  # noqa: E501
        :type: list[str]
        """

        self._follower_ids = follower_ids

    @property
    def owner_ids(self):
        """Gets the owner_ids of this UpdateStoryContents.  # noqa: E501

        An array of UUIDs of the owners of this story.  # noqa: E501

        :return: The owner_ids of this UpdateStoryContents.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this UpdateStoryContents.

        An array of UUIDs of the owners of this story.  # noqa: E501

        :param owner_ids: The owner_ids of this UpdateStoryContents.  # noqa: E501
        :type: list[str]
        """

        self._owner_ids = owner_ids

    @property
    def estimate(self):
        """Gets the estimate of this UpdateStoryContents.  # noqa: E501

        The numeric point estimate to be populated.  # noqa: E501

        :return: The estimate of this UpdateStoryContents.  # noqa: E501
        :rtype: int
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate):
        """Sets the estimate of this UpdateStoryContents.

        The numeric point estimate to be populated.  # noqa: E501

        :param estimate: The estimate of this UpdateStoryContents.  # noqa: E501
        :type: int
        """

        self._estimate = estimate

    @property
    def files(self):
        """Gets the files of this UpdateStoryContents.  # noqa: E501

        An array of files attached to the story.  # noqa: E501

        :return: The files of this UpdateStoryContents.  # noqa: E501
        :rtype: list[UploadedFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this UpdateStoryContents.

        An array of files attached to the story.  # noqa: E501

        :param files: The files of this UpdateStoryContents.  # noqa: E501
        :type: list[UploadedFile]
        """

        self._files = files

    @property
    def project_id(self):
        """Gets the project_id of this UpdateStoryContents.  # noqa: E501

        The ID of the project the story belongs to.  # noqa: E501

        :return: The project_id of this UpdateStoryContents.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UpdateStoryContents.

        The ID of the project the story belongs to.  # noqa: E501

        :param project_id: The project_id of this UpdateStoryContents.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def linked_file_ids(self):
        """Gets the linked_file_ids of this UpdateStoryContents.  # noqa: E501

        An array of the linked file IDs to be populated.  # noqa: E501

        :return: The linked_file_ids of this UpdateStoryContents.  # noqa: E501
        :rtype: list[int]
        """
        return self._linked_file_ids

    @linked_file_ids.setter
    def linked_file_ids(self, linked_file_ids):
        """Sets the linked_file_ids of this UpdateStoryContents.

        An array of the linked file IDs to be populated.  # noqa: E501

        :param linked_file_ids: The linked_file_ids of this UpdateStoryContents.  # noqa: E501
        :type: list[int]
        """

        self._linked_file_ids = linked_file_ids

    @property
    def deadline(self):
        """Gets the deadline of this UpdateStoryContents.  # noqa: E501

        The due date of the story.  # noqa: E501

        :return: The deadline of this UpdateStoryContents.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this UpdateStoryContents.

        The due date of the story.  # noqa: E501

        :param deadline: The deadline of this UpdateStoryContents.  # noqa: E501
        :type: datetime
        """

        self._deadline = deadline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateStoryContents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateStoryContents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
