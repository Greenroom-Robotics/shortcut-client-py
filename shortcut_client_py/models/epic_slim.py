# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EpicSlim(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_url': 'str',
        'description': 'str',
        'archived': 'bool',
        'started': 'bool',
        'entity_type': 'str',
        'labels': 'list[LabelSlim]',
        'mention_ids': 'list[str]',
        'member_mention_ids': 'list[str]',
        'project_ids': 'list[int]',
        'stories_without_projects': 'int',
        'completed_at_override': 'datetime',
        'productboard_plugin_id': 'str',
        'started_at': 'datetime',
        'completed_at': 'datetime',
        'name': 'str',
        'global_id': 'str',
        'completed': 'bool',
        'productboard_url': 'str',
        'planned_start_date': 'datetime',
        'state': 'str',
        'milestone_id': 'int',
        'requested_by_id': 'str',
        'epic_state_id': 'int',
        'label_ids': 'list[int]',
        'started_at_override': 'datetime',
        'group_id': 'str',
        'updated_at': 'datetime',
        'group_mention_ids': 'list[str]',
        'productboard_id': 'str',
        'follower_ids': 'list[str]',
        'owner_ids': 'list[str]',
        'external_id': 'str',
        'id': 'int',
        'position': 'int',
        'productboard_name': 'str',
        'deadline': 'datetime',
        'stats': 'EpicStats',
        'created_at': 'datetime'
    }

    attribute_map = {
        'app_url': 'app_url',
        'description': 'description',
        'archived': 'archived',
        'started': 'started',
        'entity_type': 'entity_type',
        'labels': 'labels',
        'mention_ids': 'mention_ids',
        'member_mention_ids': 'member_mention_ids',
        'project_ids': 'project_ids',
        'stories_without_projects': 'stories_without_projects',
        'completed_at_override': 'completed_at_override',
        'productboard_plugin_id': 'productboard_plugin_id',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'name': 'name',
        'global_id': 'global_id',
        'completed': 'completed',
        'productboard_url': 'productboard_url',
        'planned_start_date': 'planned_start_date',
        'state': 'state',
        'milestone_id': 'milestone_id',
        'requested_by_id': 'requested_by_id',
        'epic_state_id': 'epic_state_id',
        'label_ids': 'label_ids',
        'started_at_override': 'started_at_override',
        'group_id': 'group_id',
        'updated_at': 'updated_at',
        'group_mention_ids': 'group_mention_ids',
        'productboard_id': 'productboard_id',
        'follower_ids': 'follower_ids',
        'owner_ids': 'owner_ids',
        'external_id': 'external_id',
        'id': 'id',
        'position': 'position',
        'productboard_name': 'productboard_name',
        'deadline': 'deadline',
        'stats': 'stats',
        'created_at': 'created_at'
    }

    def __init__(self, app_url=None, description=None, archived=None, started=None, entity_type=None, labels=None, mention_ids=None, member_mention_ids=None, project_ids=None, stories_without_projects=None, completed_at_override=None, productboard_plugin_id=None, started_at=None, completed_at=None, name=None, global_id=None, completed=None, productboard_url=None, planned_start_date=None, state=None, milestone_id=None, requested_by_id=None, epic_state_id=None, label_ids=None, started_at_override=None, group_id=None, updated_at=None, group_mention_ids=None, productboard_id=None, follower_ids=None, owner_ids=None, external_id=None, id=None, position=None, productboard_name=None, deadline=None, stats=None, created_at=None):  # noqa: E501
        """EpicSlim - a model defined in Swagger"""  # noqa: E501
        self._app_url = None
        self._description = None
        self._archived = None
        self._started = None
        self._entity_type = None
        self._labels = None
        self._mention_ids = None
        self._member_mention_ids = None
        self._project_ids = None
        self._stories_without_projects = None
        self._completed_at_override = None
        self._productboard_plugin_id = None
        self._started_at = None
        self._completed_at = None
        self._name = None
        self._global_id = None
        self._completed = None
        self._productboard_url = None
        self._planned_start_date = None
        self._state = None
        self._milestone_id = None
        self._requested_by_id = None
        self._epic_state_id = None
        self._label_ids = None
        self._started_at_override = None
        self._group_id = None
        self._updated_at = None
        self._group_mention_ids = None
        self._productboard_id = None
        self._follower_ids = None
        self._owner_ids = None
        self._external_id = None
        self._id = None
        self._position = None
        self._productboard_name = None
        self._deadline = None
        self._stats = None
        self._created_at = None
        self.discriminator = None
        self.app_url = app_url
        if description is not None:
            self.description = description
        self.archived = archived
        self.started = started
        self.entity_type = entity_type
        self.labels = labels
        self.mention_ids = mention_ids
        self.member_mention_ids = member_mention_ids
        self.project_ids = project_ids
        self.stories_without_projects = stories_without_projects
        self.completed_at_override = completed_at_override
        self.productboard_plugin_id = productboard_plugin_id
        self.started_at = started_at
        self.completed_at = completed_at
        self.name = name
        self.global_id = global_id
        self.completed = completed
        self.productboard_url = productboard_url
        self.planned_start_date = planned_start_date
        self.state = state
        self.milestone_id = milestone_id
        self.requested_by_id = requested_by_id
        self.epic_state_id = epic_state_id
        self.label_ids = label_ids
        self.started_at_override = started_at_override
        self.group_id = group_id
        self.updated_at = updated_at
        self.group_mention_ids = group_mention_ids
        self.productboard_id = productboard_id
        self.follower_ids = follower_ids
        self.owner_ids = owner_ids
        self.external_id = external_id
        self.id = id
        self.position = position
        self.productboard_name = productboard_name
        self.deadline = deadline
        self.stats = stats
        self.created_at = created_at

    @property
    def app_url(self):
        """Gets the app_url of this EpicSlim.  # noqa: E501

        The Shortcut application url for the Epic.  # noqa: E501

        :return: The app_url of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._app_url

    @app_url.setter
    def app_url(self, app_url):
        """Sets the app_url of this EpicSlim.

        The Shortcut application url for the Epic.  # noqa: E501

        :param app_url: The app_url of this EpicSlim.  # noqa: E501
        :type: str
        """
        if app_url is None:
            raise ValueError("Invalid value for `app_url`, must not be `None`")  # noqa: E501

        self._app_url = app_url

    @property
    def description(self):
        """Gets the description of this EpicSlim.  # noqa: E501

        The Epic's description.  # noqa: E501

        :return: The description of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EpicSlim.

        The Epic's description.  # noqa: E501

        :param description: The description of this EpicSlim.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def archived(self):
        """Gets the archived of this EpicSlim.  # noqa: E501

        True/false boolean that indicates whether the Epic is archived or not.  # noqa: E501

        :return: The archived of this EpicSlim.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this EpicSlim.

        True/false boolean that indicates whether the Epic is archived or not.  # noqa: E501

        :param archived: The archived of this EpicSlim.  # noqa: E501
        :type: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def started(self):
        """Gets the started of this EpicSlim.  # noqa: E501

        A true/false boolean indicating if the Epic has been started.  # noqa: E501

        :return: The started of this EpicSlim.  # noqa: E501
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this EpicSlim.

        A true/false boolean indicating if the Epic has been started.  # noqa: E501

        :param started: The started of this EpicSlim.  # noqa: E501
        :type: bool
        """
        if started is None:
            raise ValueError("Invalid value for `started`, must not be `None`")  # noqa: E501

        self._started = started

    @property
    def entity_type(self):
        """Gets the entity_type of this EpicSlim.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EpicSlim.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this EpicSlim.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def labels(self):
        """Gets the labels of this EpicSlim.  # noqa: E501

        An array of Labels attached to the Epic.  # noqa: E501

        :return: The labels of this EpicSlim.  # noqa: E501
        :rtype: list[LabelSlim]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EpicSlim.

        An array of Labels attached to the Epic.  # noqa: E501

        :param labels: The labels of this EpicSlim.  # noqa: E501
        :type: list[LabelSlim]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def mention_ids(self):
        """Gets the mention_ids of this EpicSlim.  # noqa: E501

        Deprecated: use member_mention_ids.  # noqa: E501

        :return: The mention_ids of this EpicSlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._mention_ids

    @mention_ids.setter
    def mention_ids(self, mention_ids):
        """Sets the mention_ids of this EpicSlim.

        Deprecated: use member_mention_ids.  # noqa: E501

        :param mention_ids: The mention_ids of this EpicSlim.  # noqa: E501
        :type: list[str]
        """
        if mention_ids is None:
            raise ValueError("Invalid value for `mention_ids`, must not be `None`")  # noqa: E501

        self._mention_ids = mention_ids

    @property
    def member_mention_ids(self):
        """Gets the member_mention_ids of this EpicSlim.  # noqa: E501

        An array of Member IDs that have been mentioned in the Epic description.  # noqa: E501

        :return: The member_mention_ids of this EpicSlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_mention_ids

    @member_mention_ids.setter
    def member_mention_ids(self, member_mention_ids):
        """Sets the member_mention_ids of this EpicSlim.

        An array of Member IDs that have been mentioned in the Epic description.  # noqa: E501

        :param member_mention_ids: The member_mention_ids of this EpicSlim.  # noqa: E501
        :type: list[str]
        """
        if member_mention_ids is None:
            raise ValueError("Invalid value for `member_mention_ids`, must not be `None`")  # noqa: E501

        self._member_mention_ids = member_mention_ids

    @property
    def project_ids(self):
        """Gets the project_ids of this EpicSlim.  # noqa: E501

        The IDs of Projects related to this Epic.  # noqa: E501

        :return: The project_ids of this EpicSlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this EpicSlim.

        The IDs of Projects related to this Epic.  # noqa: E501

        :param project_ids: The project_ids of this EpicSlim.  # noqa: E501
        :type: list[int]
        """
        if project_ids is None:
            raise ValueError("Invalid value for `project_ids`, must not be `None`")  # noqa: E501

        self._project_ids = project_ids

    @property
    def stories_without_projects(self):
        """Gets the stories_without_projects of this EpicSlim.  # noqa: E501

        The number of stories in this epic which are not associated with a project.  # noqa: E501

        :return: The stories_without_projects of this EpicSlim.  # noqa: E501
        :rtype: int
        """
        return self._stories_without_projects

    @stories_without_projects.setter
    def stories_without_projects(self, stories_without_projects):
        """Sets the stories_without_projects of this EpicSlim.

        The number of stories in this epic which are not associated with a project.  # noqa: E501

        :param stories_without_projects: The stories_without_projects of this EpicSlim.  # noqa: E501
        :type: int
        """
        if stories_without_projects is None:
            raise ValueError("Invalid value for `stories_without_projects`, must not be `None`")  # noqa: E501

        self._stories_without_projects = stories_without_projects

    @property
    def completed_at_override(self):
        """Gets the completed_at_override of this EpicSlim.  # noqa: E501

        A manual override for the time/date the Epic was completed.  # noqa: E501

        :return: The completed_at_override of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at_override

    @completed_at_override.setter
    def completed_at_override(self, completed_at_override):
        """Sets the completed_at_override of this EpicSlim.

        A manual override for the time/date the Epic was completed.  # noqa: E501

        :param completed_at_override: The completed_at_override of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if completed_at_override is None:
            raise ValueError("Invalid value for `completed_at_override`, must not be `None`")  # noqa: E501

        self._completed_at_override = completed_at_override

    @property
    def productboard_plugin_id(self):
        """Gets the productboard_plugin_id of this EpicSlim.  # noqa: E501

        The ID of the associated productboard integration.  # noqa: E501

        :return: The productboard_plugin_id of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._productboard_plugin_id

    @productboard_plugin_id.setter
    def productboard_plugin_id(self, productboard_plugin_id):
        """Sets the productboard_plugin_id of this EpicSlim.

        The ID of the associated productboard integration.  # noqa: E501

        :param productboard_plugin_id: The productboard_plugin_id of this EpicSlim.  # noqa: E501
        :type: str
        """
        if productboard_plugin_id is None:
            raise ValueError("Invalid value for `productboard_plugin_id`, must not be `None`")  # noqa: E501

        self._productboard_plugin_id = productboard_plugin_id

    @property
    def started_at(self):
        """Gets the started_at of this EpicSlim.  # noqa: E501

        The time/date the Epic was started.  # noqa: E501

        :return: The started_at of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this EpicSlim.

        The time/date the Epic was started.  # noqa: E501

        :param started_at: The started_at of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this EpicSlim.  # noqa: E501

        The time/date the Epic was completed.  # noqa: E501

        :return: The completed_at of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this EpicSlim.

        The time/date the Epic was completed.  # noqa: E501

        :param completed_at: The completed_at of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")  # noqa: E501

        self._completed_at = completed_at

    @property
    def name(self):
        """Gets the name of this EpicSlim.  # noqa: E501

        The name of the Epic.  # noqa: E501

        :return: The name of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EpicSlim.

        The name of the Epic.  # noqa: E501

        :param name: The name of this EpicSlim.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def global_id(self):
        """Gets the global_id of this EpicSlim.  # noqa: E501


        :return: The global_id of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this EpicSlim.


        :param global_id: The global_id of this EpicSlim.  # noqa: E501
        :type: str
        """
        if global_id is None:
            raise ValueError("Invalid value for `global_id`, must not be `None`")  # noqa: E501

        self._global_id = global_id

    @property
    def completed(self):
        """Gets the completed of this EpicSlim.  # noqa: E501

        A true/false boolean indicating if the Epic has been completed.  # noqa: E501

        :return: The completed of this EpicSlim.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this EpicSlim.

        A true/false boolean indicating if the Epic has been completed.  # noqa: E501

        :param completed: The completed of this EpicSlim.  # noqa: E501
        :type: bool
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def productboard_url(self):
        """Gets the productboard_url of this EpicSlim.  # noqa: E501

        The URL of the associated productboard feature.  # noqa: E501

        :return: The productboard_url of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._productboard_url

    @productboard_url.setter
    def productboard_url(self, productboard_url):
        """Sets the productboard_url of this EpicSlim.

        The URL of the associated productboard feature.  # noqa: E501

        :param productboard_url: The productboard_url of this EpicSlim.  # noqa: E501
        :type: str
        """
        if productboard_url is None:
            raise ValueError("Invalid value for `productboard_url`, must not be `None`")  # noqa: E501

        self._productboard_url = productboard_url

    @property
    def planned_start_date(self):
        """Gets the planned_start_date of this EpicSlim.  # noqa: E501

        The Epic's planned start date.  # noqa: E501

        :return: The planned_start_date of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_start_date

    @planned_start_date.setter
    def planned_start_date(self, planned_start_date):
        """Sets the planned_start_date of this EpicSlim.

        The Epic's planned start date.  # noqa: E501

        :param planned_start_date: The planned_start_date of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if planned_start_date is None:
            raise ValueError("Invalid value for `planned_start_date`, must not be `None`")  # noqa: E501

        self._planned_start_date = planned_start_date

    @property
    def state(self):
        """Gets the state of this EpicSlim.  # noqa: E501

        `Deprecated` The workflow state that the Epic is in.  # noqa: E501

        :return: The state of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EpicSlim.

        `Deprecated` The workflow state that the Epic is in.  # noqa: E501

        :param state: The state of this EpicSlim.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def milestone_id(self):
        """Gets the milestone_id of this EpicSlim.  # noqa: E501

        The ID of the Milestone this Epic is related to.  # noqa: E501

        :return: The milestone_id of this EpicSlim.  # noqa: E501
        :rtype: int
        """
        return self._milestone_id

    @milestone_id.setter
    def milestone_id(self, milestone_id):
        """Sets the milestone_id of this EpicSlim.

        The ID of the Milestone this Epic is related to.  # noqa: E501

        :param milestone_id: The milestone_id of this EpicSlim.  # noqa: E501
        :type: int
        """
        if milestone_id is None:
            raise ValueError("Invalid value for `milestone_id`, must not be `None`")  # noqa: E501

        self._milestone_id = milestone_id

    @property
    def requested_by_id(self):
        """Gets the requested_by_id of this EpicSlim.  # noqa: E501

        The ID of the Member that requested the epic.  # noqa: E501

        :return: The requested_by_id of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._requested_by_id

    @requested_by_id.setter
    def requested_by_id(self, requested_by_id):
        """Sets the requested_by_id of this EpicSlim.

        The ID of the Member that requested the epic.  # noqa: E501

        :param requested_by_id: The requested_by_id of this EpicSlim.  # noqa: E501
        :type: str
        """
        if requested_by_id is None:
            raise ValueError("Invalid value for `requested_by_id`, must not be `None`")  # noqa: E501

        self._requested_by_id = requested_by_id

    @property
    def epic_state_id(self):
        """Gets the epic_state_id of this EpicSlim.  # noqa: E501

        The ID of the Epic State.  # noqa: E501

        :return: The epic_state_id of this EpicSlim.  # noqa: E501
        :rtype: int
        """
        return self._epic_state_id

    @epic_state_id.setter
    def epic_state_id(self, epic_state_id):
        """Sets the epic_state_id of this EpicSlim.

        The ID of the Epic State.  # noqa: E501

        :param epic_state_id: The epic_state_id of this EpicSlim.  # noqa: E501
        :type: int
        """
        if epic_state_id is None:
            raise ValueError("Invalid value for `epic_state_id`, must not be `None`")  # noqa: E501

        self._epic_state_id = epic_state_id

    @property
    def label_ids(self):
        """Gets the label_ids of this EpicSlim.  # noqa: E501

        An array of Label ids attached to the Epic.  # noqa: E501

        :return: The label_ids of this EpicSlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this EpicSlim.

        An array of Label ids attached to the Epic.  # noqa: E501

        :param label_ids: The label_ids of this EpicSlim.  # noqa: E501
        :type: list[int]
        """
        if label_ids is None:
            raise ValueError("Invalid value for `label_ids`, must not be `None`")  # noqa: E501

        self._label_ids = label_ids

    @property
    def started_at_override(self):
        """Gets the started_at_override of this EpicSlim.  # noqa: E501

        A manual override for the time/date the Epic was started.  # noqa: E501

        :return: The started_at_override of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at_override

    @started_at_override.setter
    def started_at_override(self, started_at_override):
        """Sets the started_at_override of this EpicSlim.

        A manual override for the time/date the Epic was started.  # noqa: E501

        :param started_at_override: The started_at_override of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if started_at_override is None:
            raise ValueError("Invalid value for `started_at_override`, must not be `None`")  # noqa: E501

        self._started_at_override = started_at_override

    @property
    def group_id(self):
        """Gets the group_id of this EpicSlim.  # noqa: E501


        :return: The group_id of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this EpicSlim.


        :param group_id: The group_id of this EpicSlim.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def updated_at(self):
        """Gets the updated_at of this EpicSlim.  # noqa: E501

        The time/date the Epic was updated.  # noqa: E501

        :return: The updated_at of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EpicSlim.

        The time/date the Epic was updated.  # noqa: E501

        :param updated_at: The updated_at of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def group_mention_ids(self):
        """Gets the group_mention_ids of this EpicSlim.  # noqa: E501

        An array of Group IDs that have been mentioned in the Epic description.  # noqa: E501

        :return: The group_mention_ids of this EpicSlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_mention_ids

    @group_mention_ids.setter
    def group_mention_ids(self, group_mention_ids):
        """Sets the group_mention_ids of this EpicSlim.

        An array of Group IDs that have been mentioned in the Epic description.  # noqa: E501

        :param group_mention_ids: The group_mention_ids of this EpicSlim.  # noqa: E501
        :type: list[str]
        """
        if group_mention_ids is None:
            raise ValueError("Invalid value for `group_mention_ids`, must not be `None`")  # noqa: E501

        self._group_mention_ids = group_mention_ids

    @property
    def productboard_id(self):
        """Gets the productboard_id of this EpicSlim.  # noqa: E501

        The ID of the associated productboard feature.  # noqa: E501

        :return: The productboard_id of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._productboard_id

    @productboard_id.setter
    def productboard_id(self, productboard_id):
        """Sets the productboard_id of this EpicSlim.

        The ID of the associated productboard feature.  # noqa: E501

        :param productboard_id: The productboard_id of this EpicSlim.  # noqa: E501
        :type: str
        """
        if productboard_id is None:
            raise ValueError("Invalid value for `productboard_id`, must not be `None`")  # noqa: E501

        self._productboard_id = productboard_id

    @property
    def follower_ids(self):
        """Gets the follower_ids of this EpicSlim.  # noqa: E501

        An array of UUIDs for any Members you want to add as Followers on this Epic.  # noqa: E501

        :return: The follower_ids of this EpicSlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._follower_ids

    @follower_ids.setter
    def follower_ids(self, follower_ids):
        """Sets the follower_ids of this EpicSlim.

        An array of UUIDs for any Members you want to add as Followers on this Epic.  # noqa: E501

        :param follower_ids: The follower_ids of this EpicSlim.  # noqa: E501
        :type: list[str]
        """
        if follower_ids is None:
            raise ValueError("Invalid value for `follower_ids`, must not be `None`")  # noqa: E501

        self._follower_ids = follower_ids

    @property
    def owner_ids(self):
        """Gets the owner_ids of this EpicSlim.  # noqa: E501

        An array of UUIDs for any members you want to add as Owners on this new Epic.  # noqa: E501

        :return: The owner_ids of this EpicSlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this EpicSlim.

        An array of UUIDs for any members you want to add as Owners on this new Epic.  # noqa: E501

        :param owner_ids: The owner_ids of this EpicSlim.  # noqa: E501
        :type: list[str]
        """
        if owner_ids is None:
            raise ValueError("Invalid value for `owner_ids`, must not be `None`")  # noqa: E501

        self._owner_ids = owner_ids

    @property
    def external_id(self):
        """Gets the external_id of this EpicSlim.  # noqa: E501

        This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :return: The external_id of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this EpicSlim.

        This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :param external_id: The external_id of this EpicSlim.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this EpicSlim.  # noqa: E501

        The unique ID of the Epic.  # noqa: E501

        :return: The id of this EpicSlim.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpicSlim.

        The unique ID of the Epic.  # noqa: E501

        :param id: The id of this EpicSlim.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def position(self):
        """Gets the position of this EpicSlim.  # noqa: E501

        The Epic's relative position in the Epic workflow state.  # noqa: E501

        :return: The position of this EpicSlim.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EpicSlim.

        The Epic's relative position in the Epic workflow state.  # noqa: E501

        :param position: The position of this EpicSlim.  # noqa: E501
        :type: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def productboard_name(self):
        """Gets the productboard_name of this EpicSlim.  # noqa: E501

        The name of the associated productboard feature.  # noqa: E501

        :return: The productboard_name of this EpicSlim.  # noqa: E501
        :rtype: str
        """
        return self._productboard_name

    @productboard_name.setter
    def productboard_name(self, productboard_name):
        """Sets the productboard_name of this EpicSlim.

        The name of the associated productboard feature.  # noqa: E501

        :param productboard_name: The productboard_name of this EpicSlim.  # noqa: E501
        :type: str
        """
        if productboard_name is None:
            raise ValueError("Invalid value for `productboard_name`, must not be `None`")  # noqa: E501

        self._productboard_name = productboard_name

    @property
    def deadline(self):
        """Gets the deadline of this EpicSlim.  # noqa: E501

        The Epic's deadline.  # noqa: E501

        :return: The deadline of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this EpicSlim.

        The Epic's deadline.  # noqa: E501

        :param deadline: The deadline of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if deadline is None:
            raise ValueError("Invalid value for `deadline`, must not be `None`")  # noqa: E501

        self._deadline = deadline

    @property
    def stats(self):
        """Gets the stats of this EpicSlim.  # noqa: E501


        :return: The stats of this EpicSlim.  # noqa: E501
        :rtype: EpicStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this EpicSlim.


        :param stats: The stats of this EpicSlim.  # noqa: E501
        :type: EpicStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats

    @property
    def created_at(self):
        """Gets the created_at of this EpicSlim.  # noqa: E501

        The time/date the Epic was created.  # noqa: E501

        :return: The created_at of this EpicSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EpicSlim.

        The time/date the Epic was created.  # noqa: E501

        :param created_at: The created_at of this EpicSlim.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpicSlim, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpicSlim):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
