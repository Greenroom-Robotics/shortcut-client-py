# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LabelStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_related_documents': 'int',
        'num_epics': 'int',
        'num_stories_unstarted': 'int',
        'num_stories_total': 'int',
        'num_epics_unstarted': 'int',
        'num_epics_in_progress': 'int',
        'num_points_unstarted': 'int',
        'num_stories_unestimated': 'int',
        'num_points_in_progress': 'int',
        'num_epics_total': 'int',
        'num_stories_completed': 'int',
        'num_points_completed': 'int',
        'num_points_total': 'int',
        'num_stories_in_progress': 'int',
        'num_epics_completed': 'int'
    }

    attribute_map = {
        'num_related_documents': 'num_related_documents',
        'num_epics': 'num_epics',
        'num_stories_unstarted': 'num_stories_unstarted',
        'num_stories_total': 'num_stories_total',
        'num_epics_unstarted': 'num_epics_unstarted',
        'num_epics_in_progress': 'num_epics_in_progress',
        'num_points_unstarted': 'num_points_unstarted',
        'num_stories_unestimated': 'num_stories_unestimated',
        'num_points_in_progress': 'num_points_in_progress',
        'num_epics_total': 'num_epics_total',
        'num_stories_completed': 'num_stories_completed',
        'num_points_completed': 'num_points_completed',
        'num_points_total': 'num_points_total',
        'num_stories_in_progress': 'num_stories_in_progress',
        'num_epics_completed': 'num_epics_completed'
    }

    def __init__(self, num_related_documents=None, num_epics=None, num_stories_unstarted=None, num_stories_total=None, num_epics_unstarted=None, num_epics_in_progress=None, num_points_unstarted=None, num_stories_unestimated=None, num_points_in_progress=None, num_epics_total=None, num_stories_completed=None, num_points_completed=None, num_points_total=None, num_stories_in_progress=None, num_epics_completed=None):  # noqa: E501
        """LabelStats - a model defined in Swagger"""  # noqa: E501
        self._num_related_documents = None
        self._num_epics = None
        self._num_stories_unstarted = None
        self._num_stories_total = None
        self._num_epics_unstarted = None
        self._num_epics_in_progress = None
        self._num_points_unstarted = None
        self._num_stories_unestimated = None
        self._num_points_in_progress = None
        self._num_epics_total = None
        self._num_stories_completed = None
        self._num_points_completed = None
        self._num_points_total = None
        self._num_stories_in_progress = None
        self._num_epics_completed = None
        self.discriminator = None
        self.num_related_documents = num_related_documents
        self.num_epics = num_epics
        self.num_stories_unstarted = num_stories_unstarted
        self.num_stories_total = num_stories_total
        self.num_epics_unstarted = num_epics_unstarted
        self.num_epics_in_progress = num_epics_in_progress
        self.num_points_unstarted = num_points_unstarted
        self.num_stories_unestimated = num_stories_unestimated
        self.num_points_in_progress = num_points_in_progress
        self.num_epics_total = num_epics_total
        self.num_stories_completed = num_stories_completed
        self.num_points_completed = num_points_completed
        self.num_points_total = num_points_total
        self.num_stories_in_progress = num_stories_in_progress
        self.num_epics_completed = num_epics_completed

    @property
    def num_related_documents(self):
        """Gets the num_related_documents of this LabelStats.  # noqa: E501

        The total number of Documents associated this Label.  # noqa: E501

        :return: The num_related_documents of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_related_documents

    @num_related_documents.setter
    def num_related_documents(self, num_related_documents):
        """Sets the num_related_documents of this LabelStats.

        The total number of Documents associated this Label.  # noqa: E501

        :param num_related_documents: The num_related_documents of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_related_documents is None:
            raise ValueError("Invalid value for `num_related_documents`, must not be `None`")  # noqa: E501

        self._num_related_documents = num_related_documents

    @property
    def num_epics(self):
        """Gets the num_epics of this LabelStats.  # noqa: E501

        The total number of Epics with this Label.  # noqa: E501

        :return: The num_epics of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_epics

    @num_epics.setter
    def num_epics(self, num_epics):
        """Sets the num_epics of this LabelStats.

        The total number of Epics with this Label.  # noqa: E501

        :param num_epics: The num_epics of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_epics is None:
            raise ValueError("Invalid value for `num_epics`, must not be `None`")  # noqa: E501

        self._num_epics = num_epics

    @property
    def num_stories_unstarted(self):
        """Gets the num_stories_unstarted of this LabelStats.  # noqa: E501

        The total number of stories unstarted Stories with this Label.  # noqa: E501

        :return: The num_stories_unstarted of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_stories_unstarted

    @num_stories_unstarted.setter
    def num_stories_unstarted(self, num_stories_unstarted):
        """Sets the num_stories_unstarted of this LabelStats.

        The total number of stories unstarted Stories with this Label.  # noqa: E501

        :param num_stories_unstarted: The num_stories_unstarted of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_stories_unstarted is None:
            raise ValueError("Invalid value for `num_stories_unstarted`, must not be `None`")  # noqa: E501

        self._num_stories_unstarted = num_stories_unstarted

    @property
    def num_stories_total(self):
        """Gets the num_stories_total of this LabelStats.  # noqa: E501

        The total number of Stories with this Label.  # noqa: E501

        :return: The num_stories_total of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_stories_total

    @num_stories_total.setter
    def num_stories_total(self, num_stories_total):
        """Sets the num_stories_total of this LabelStats.

        The total number of Stories with this Label.  # noqa: E501

        :param num_stories_total: The num_stories_total of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_stories_total is None:
            raise ValueError("Invalid value for `num_stories_total`, must not be `None`")  # noqa: E501

        self._num_stories_total = num_stories_total

    @property
    def num_epics_unstarted(self):
        """Gets the num_epics_unstarted of this LabelStats.  # noqa: E501

        The number of unstarted epics assoicated with this label.  # noqa: E501

        :return: The num_epics_unstarted of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_epics_unstarted

    @num_epics_unstarted.setter
    def num_epics_unstarted(self, num_epics_unstarted):
        """Sets the num_epics_unstarted of this LabelStats.

        The number of unstarted epics assoicated with this label.  # noqa: E501

        :param num_epics_unstarted: The num_epics_unstarted of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_epics_unstarted is None:
            raise ValueError("Invalid value for `num_epics_unstarted`, must not be `None`")  # noqa: E501

        self._num_epics_unstarted = num_epics_unstarted

    @property
    def num_epics_in_progress(self):
        """Gets the num_epics_in_progress of this LabelStats.  # noqa: E501

        The number of in progress epics assoicated with this label.  # noqa: E501

        :return: The num_epics_in_progress of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_epics_in_progress

    @num_epics_in_progress.setter
    def num_epics_in_progress(self, num_epics_in_progress):
        """Sets the num_epics_in_progress of this LabelStats.

        The number of in progress epics assoicated with this label.  # noqa: E501

        :param num_epics_in_progress: The num_epics_in_progress of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_epics_in_progress is None:
            raise ValueError("Invalid value for `num_epics_in_progress`, must not be `None`")  # noqa: E501

        self._num_epics_in_progress = num_epics_in_progress

    @property
    def num_points_unstarted(self):
        """Gets the num_points_unstarted of this LabelStats.  # noqa: E501

        The total number of unstarted points with this Label.  # noqa: E501

        :return: The num_points_unstarted of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_points_unstarted

    @num_points_unstarted.setter
    def num_points_unstarted(self, num_points_unstarted):
        """Sets the num_points_unstarted of this LabelStats.

        The total number of unstarted points with this Label.  # noqa: E501

        :param num_points_unstarted: The num_points_unstarted of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_points_unstarted is None:
            raise ValueError("Invalid value for `num_points_unstarted`, must not be `None`")  # noqa: E501

        self._num_points_unstarted = num_points_unstarted

    @property
    def num_stories_unestimated(self):
        """Gets the num_stories_unestimated of this LabelStats.  # noqa: E501

        The total number of Stories with no point estimate with this Label.  # noqa: E501

        :return: The num_stories_unestimated of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_stories_unestimated

    @num_stories_unestimated.setter
    def num_stories_unestimated(self, num_stories_unestimated):
        """Sets the num_stories_unestimated of this LabelStats.

        The total number of Stories with no point estimate with this Label.  # noqa: E501

        :param num_stories_unestimated: The num_stories_unestimated of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_stories_unestimated is None:
            raise ValueError("Invalid value for `num_stories_unestimated`, must not be `None`")  # noqa: E501

        self._num_stories_unestimated = num_stories_unestimated

    @property
    def num_points_in_progress(self):
        """Gets the num_points_in_progress of this LabelStats.  # noqa: E501

        The total number of in-progress points with this Label.  # noqa: E501

        :return: The num_points_in_progress of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_points_in_progress

    @num_points_in_progress.setter
    def num_points_in_progress(self, num_points_in_progress):
        """Sets the num_points_in_progress of this LabelStats.

        The total number of in-progress points with this Label.  # noqa: E501

        :param num_points_in_progress: The num_points_in_progress of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_points_in_progress is None:
            raise ValueError("Invalid value for `num_points_in_progress`, must not be `None`")  # noqa: E501

        self._num_points_in_progress = num_points_in_progress

    @property
    def num_epics_total(self):
        """Gets the num_epics_total of this LabelStats.  # noqa: E501

        The total number of Epics assoicated with this Label.  # noqa: E501

        :return: The num_epics_total of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_epics_total

    @num_epics_total.setter
    def num_epics_total(self, num_epics_total):
        """Sets the num_epics_total of this LabelStats.

        The total number of Epics assoicated with this Label.  # noqa: E501

        :param num_epics_total: The num_epics_total of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_epics_total is None:
            raise ValueError("Invalid value for `num_epics_total`, must not be `None`")  # noqa: E501

        self._num_epics_total = num_epics_total

    @property
    def num_stories_completed(self):
        """Gets the num_stories_completed of this LabelStats.  # noqa: E501

        The total number of completed Stories with this Label.  # noqa: E501

        :return: The num_stories_completed of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_stories_completed

    @num_stories_completed.setter
    def num_stories_completed(self, num_stories_completed):
        """Sets the num_stories_completed of this LabelStats.

        The total number of completed Stories with this Label.  # noqa: E501

        :param num_stories_completed: The num_stories_completed of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_stories_completed is None:
            raise ValueError("Invalid value for `num_stories_completed`, must not be `None`")  # noqa: E501

        self._num_stories_completed = num_stories_completed

    @property
    def num_points_completed(self):
        """Gets the num_points_completed of this LabelStats.  # noqa: E501

        The total number of completed points with this Label.  # noqa: E501

        :return: The num_points_completed of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_points_completed

    @num_points_completed.setter
    def num_points_completed(self, num_points_completed):
        """Sets the num_points_completed of this LabelStats.

        The total number of completed points with this Label.  # noqa: E501

        :param num_points_completed: The num_points_completed of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_points_completed is None:
            raise ValueError("Invalid value for `num_points_completed`, must not be `None`")  # noqa: E501

        self._num_points_completed = num_points_completed

    @property
    def num_points_total(self):
        """Gets the num_points_total of this LabelStats.  # noqa: E501

        The total number of points with this Label.  # noqa: E501

        :return: The num_points_total of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_points_total

    @num_points_total.setter
    def num_points_total(self, num_points_total):
        """Sets the num_points_total of this LabelStats.

        The total number of points with this Label.  # noqa: E501

        :param num_points_total: The num_points_total of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_points_total is None:
            raise ValueError("Invalid value for `num_points_total`, must not be `None`")  # noqa: E501

        self._num_points_total = num_points_total

    @property
    def num_stories_in_progress(self):
        """Gets the num_stories_in_progress of this LabelStats.  # noqa: E501

        The total number of in-progress Stories with this Label.  # noqa: E501

        :return: The num_stories_in_progress of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_stories_in_progress

    @num_stories_in_progress.setter
    def num_stories_in_progress(self, num_stories_in_progress):
        """Sets the num_stories_in_progress of this LabelStats.

        The total number of in-progress Stories with this Label.  # noqa: E501

        :param num_stories_in_progress: The num_stories_in_progress of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_stories_in_progress is None:
            raise ValueError("Invalid value for `num_stories_in_progress`, must not be `None`")  # noqa: E501

        self._num_stories_in_progress = num_stories_in_progress

    @property
    def num_epics_completed(self):
        """Gets the num_epics_completed of this LabelStats.  # noqa: E501

        The number of completed Epics assoicated with this Label.  # noqa: E501

        :return: The num_epics_completed of this LabelStats.  # noqa: E501
        :rtype: int
        """
        return self._num_epics_completed

    @num_epics_completed.setter
    def num_epics_completed(self, num_epics_completed):
        """Sets the num_epics_completed of this LabelStats.

        The number of completed Epics assoicated with this Label.  # noqa: E501

        :param num_epics_completed: The num_epics_completed of this LabelStats.  # noqa: E501
        :type: int
        """
        if num_epics_completed is None:
            raise ValueError("Invalid value for `num_epics_completed`, must not be `None`")  # noqa: E501

        self._num_epics_completed = num_epics_completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabelStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
