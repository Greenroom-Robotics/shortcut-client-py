# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UploadedFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'entity_type': 'str',
        'story_ids': 'list[int]',
        'mention_ids': 'list[str]',
        'member_mention_ids': 'list[str]',
        'name': 'str',
        'thumbnail_url': 'str',
        'size': 'int',
        'uploader_id': 'str',
        'content_type': 'str',
        'updated_at': 'datetime',
        'filename': 'str',
        'group_mention_ids': 'list[str]',
        'external_id': 'str',
        'id': 'int',
        'url': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'description': 'description',
        'entity_type': 'entity_type',
        'story_ids': 'story_ids',
        'mention_ids': 'mention_ids',
        'member_mention_ids': 'member_mention_ids',
        'name': 'name',
        'thumbnail_url': 'thumbnail_url',
        'size': 'size',
        'uploader_id': 'uploader_id',
        'content_type': 'content_type',
        'updated_at': 'updated_at',
        'filename': 'filename',
        'group_mention_ids': 'group_mention_ids',
        'external_id': 'external_id',
        'id': 'id',
        'url': 'url',
        'created_at': 'created_at'
    }

    def __init__(self, description=None, entity_type=None, story_ids=None, mention_ids=None, member_mention_ids=None, name=None, thumbnail_url=None, size=None, uploader_id=None, content_type=None, updated_at=None, filename=None, group_mention_ids=None, external_id=None, id=None, url=None, created_at=None):  # noqa: E501
        """UploadedFile - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._entity_type = None
        self._story_ids = None
        self._mention_ids = None
        self._member_mention_ids = None
        self._name = None
        self._thumbnail_url = None
        self._size = None
        self._uploader_id = None
        self._content_type = None
        self._updated_at = None
        self._filename = None
        self._group_mention_ids = None
        self._external_id = None
        self._id = None
        self._url = None
        self._created_at = None
        self.discriminator = None
        self.description = description
        self.entity_type = entity_type
        self.story_ids = story_ids
        self.mention_ids = mention_ids
        self.member_mention_ids = member_mention_ids
        self.name = name
        self.thumbnail_url = thumbnail_url
        self.size = size
        self.uploader_id = uploader_id
        self.content_type = content_type
        self.updated_at = updated_at
        self.filename = filename
        self.group_mention_ids = group_mention_ids
        self.external_id = external_id
        self.id = id
        self.url = url
        self.created_at = created_at

    @property
    def description(self):
        """Gets the description of this UploadedFile.  # noqa: E501

        The description of the file.  # noqa: E501

        :return: The description of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UploadedFile.

        The description of the file.  # noqa: E501

        :param description: The description of this UploadedFile.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def entity_type(self):
        """Gets the entity_type of this UploadedFile.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this UploadedFile.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this UploadedFile.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def story_ids(self):
        """Gets the story_ids of this UploadedFile.  # noqa: E501

        The unique IDs of the Stories associated with this file.  # noqa: E501

        :return: The story_ids of this UploadedFile.  # noqa: E501
        :rtype: list[int]
        """
        return self._story_ids

    @story_ids.setter
    def story_ids(self, story_ids):
        """Sets the story_ids of this UploadedFile.

        The unique IDs of the Stories associated with this file.  # noqa: E501

        :param story_ids: The story_ids of this UploadedFile.  # noqa: E501
        :type: list[int]
        """
        if story_ids is None:
            raise ValueError("Invalid value for `story_ids`, must not be `None`")  # noqa: E501

        self._story_ids = story_ids

    @property
    def mention_ids(self):
        """Gets the mention_ids of this UploadedFile.  # noqa: E501

        Deprecated: use member_mention_ids.  # noqa: E501

        :return: The mention_ids of this UploadedFile.  # noqa: E501
        :rtype: list[str]
        """
        return self._mention_ids

    @mention_ids.setter
    def mention_ids(self, mention_ids):
        """Sets the mention_ids of this UploadedFile.

        Deprecated: use member_mention_ids.  # noqa: E501

        :param mention_ids: The mention_ids of this UploadedFile.  # noqa: E501
        :type: list[str]
        """
        if mention_ids is None:
            raise ValueError("Invalid value for `mention_ids`, must not be `None`")  # noqa: E501

        self._mention_ids = mention_ids

    @property
    def member_mention_ids(self):
        """Gets the member_mention_ids of this UploadedFile.  # noqa: E501

        The unique IDs of the Members who are mentioned in the file description.  # noqa: E501

        :return: The member_mention_ids of this UploadedFile.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_mention_ids

    @member_mention_ids.setter
    def member_mention_ids(self, member_mention_ids):
        """Sets the member_mention_ids of this UploadedFile.

        The unique IDs of the Members who are mentioned in the file description.  # noqa: E501

        :param member_mention_ids: The member_mention_ids of this UploadedFile.  # noqa: E501
        :type: list[str]
        """
        if member_mention_ids is None:
            raise ValueError("Invalid value for `member_mention_ids`, must not be `None`")  # noqa: E501

        self._member_mention_ids = member_mention_ids

    @property
    def name(self):
        """Gets the name of this UploadedFile.  # noqa: E501

        The optional User-specified name of the file.  # noqa: E501

        :return: The name of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UploadedFile.

        The optional User-specified name of the file.  # noqa: E501

        :param name: The name of this UploadedFile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this UploadedFile.  # noqa: E501

        The url where the thumbnail of the file can be found in Shortcut.  # noqa: E501

        :return: The thumbnail_url of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this UploadedFile.

        The url where the thumbnail of the file can be found in Shortcut.  # noqa: E501

        :param thumbnail_url: The thumbnail_url of this UploadedFile.  # noqa: E501
        :type: str
        """
        if thumbnail_url is None:
            raise ValueError("Invalid value for `thumbnail_url`, must not be `None`")  # noqa: E501

        self._thumbnail_url = thumbnail_url

    @property
    def size(self):
        """Gets the size of this UploadedFile.  # noqa: E501

        The size of the file.  # noqa: E501

        :return: The size of this UploadedFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UploadedFile.

        The size of the file.  # noqa: E501

        :param size: The size of this UploadedFile.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def uploader_id(self):
        """Gets the uploader_id of this UploadedFile.  # noqa: E501

        The unique ID of the Member who uploaded the file.  # noqa: E501

        :return: The uploader_id of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._uploader_id

    @uploader_id.setter
    def uploader_id(self, uploader_id):
        """Sets the uploader_id of this UploadedFile.

        The unique ID of the Member who uploaded the file.  # noqa: E501

        :param uploader_id: The uploader_id of this UploadedFile.  # noqa: E501
        :type: str
        """
        if uploader_id is None:
            raise ValueError("Invalid value for `uploader_id`, must not be `None`")  # noqa: E501

        self._uploader_id = uploader_id

    @property
    def content_type(self):
        """Gets the content_type of this UploadedFile.  # noqa: E501

        Free form string corresponding to a text or image file.  # noqa: E501

        :return: The content_type of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this UploadedFile.

        Free form string corresponding to a text or image file.  # noqa: E501

        :param content_type: The content_type of this UploadedFile.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def updated_at(self):
        """Gets the updated_at of this UploadedFile.  # noqa: E501

        The time/date that the file was updated.  # noqa: E501

        :return: The updated_at of this UploadedFile.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UploadedFile.

        The time/date that the file was updated.  # noqa: E501

        :param updated_at: The updated_at of this UploadedFile.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def filename(self):
        """Gets the filename of this UploadedFile.  # noqa: E501

        The name assigned to the file in Shortcut upon upload.  # noqa: E501

        :return: The filename of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this UploadedFile.

        The name assigned to the file in Shortcut upon upload.  # noqa: E501

        :param filename: The filename of this UploadedFile.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def group_mention_ids(self):
        """Gets the group_mention_ids of this UploadedFile.  # noqa: E501

        The unique IDs of the Groups who are mentioned in the file description.  # noqa: E501

        :return: The group_mention_ids of this UploadedFile.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_mention_ids

    @group_mention_ids.setter
    def group_mention_ids(self, group_mention_ids):
        """Sets the group_mention_ids of this UploadedFile.

        The unique IDs of the Groups who are mentioned in the file description.  # noqa: E501

        :param group_mention_ids: The group_mention_ids of this UploadedFile.  # noqa: E501
        :type: list[str]
        """
        if group_mention_ids is None:
            raise ValueError("Invalid value for `group_mention_ids`, must not be `None`")  # noqa: E501

        self._group_mention_ids = group_mention_ids

    @property
    def external_id(self):
        """Gets the external_id of this UploadedFile.  # noqa: E501

        This field can be set to another unique ID. In the case that the File has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :return: The external_id of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this UploadedFile.

        This field can be set to another unique ID. In the case that the File has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :param external_id: The external_id of this UploadedFile.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this UploadedFile.  # noqa: E501

        The unique ID for the file.  # noqa: E501

        :return: The id of this UploadedFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UploadedFile.

        The unique ID for the file.  # noqa: E501

        :param id: The id of this UploadedFile.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this UploadedFile.  # noqa: E501

        The URL for the file.  # noqa: E501

        :return: The url of this UploadedFile.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UploadedFile.

        The URL for the file.  # noqa: E501

        :param url: The url of this UploadedFile.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def created_at(self):
        """Gets the created_at of this UploadedFile.  # noqa: E501

        The time/date that the file was created.  # noqa: E501

        :return: The created_at of this UploadedFile.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UploadedFile.

        The time/date that the file was created.  # noqa: E501

        :param created_at: The created_at of this UploadedFile.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadedFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadedFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
