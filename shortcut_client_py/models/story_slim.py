# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StorySlim(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_url': 'str',
        'description': 'str',
        'archived': 'bool',
        'started': 'bool',
        'story_links': 'list[TypedStoryLink]',
        'entity_type': 'str',
        'labels': 'list[LabelSlim]',
        'task_ids': 'list[int]',
        'mention_ids': 'list[str]',
        'member_mention_ids': 'list[str]',
        'story_type': 'str',
        'custom_fields': 'list[StoryCustomField]',
        'file_ids': 'list[int]',
        'num_tasks_completed': 'int',
        'workflow_id': 'int',
        'completed_at_override': 'datetime',
        'started_at': 'datetime',
        'completed_at': 'datetime',
        'name': 'str',
        'completed': 'bool',
        'blocker': 'bool',
        'epic_id': 'int',
        'story_template_id': 'str',
        'external_links': 'list[str]',
        'previous_iteration_ids': 'list[int]',
        'requested_by_id': 'str',
        'iteration_id': 'int',
        'label_ids': 'list[int]',
        'started_at_override': 'datetime',
        'group_id': 'str',
        'workflow_state_id': 'int',
        'updated_at': 'datetime',
        'group_mention_ids': 'list[str]',
        'follower_ids': 'list[str]',
        'owner_ids': 'list[str]',
        'external_id': 'str',
        'id': 'int',
        'lead_time': 'int',
        'estimate': 'int',
        'position': 'int',
        'blocked': 'bool',
        'project_id': 'int',
        'linked_file_ids': 'list[int]',
        'deadline': 'datetime',
        'stats': 'StoryStats',
        'comment_ids': 'list[int]',
        'cycle_time': 'int',
        'created_at': 'datetime',
        'moved_at': 'datetime'
    }

    attribute_map = {
        'app_url': 'app_url',
        'description': 'description',
        'archived': 'archived',
        'started': 'started',
        'story_links': 'story_links',
        'entity_type': 'entity_type',
        'labels': 'labels',
        'task_ids': 'task_ids',
        'mention_ids': 'mention_ids',
        'member_mention_ids': 'member_mention_ids',
        'story_type': 'story_type',
        'custom_fields': 'custom_fields',
        'file_ids': 'file_ids',
        'num_tasks_completed': 'num_tasks_completed',
        'workflow_id': 'workflow_id',
        'completed_at_override': 'completed_at_override',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'name': 'name',
        'completed': 'completed',
        'blocker': 'blocker',
        'epic_id': 'epic_id',
        'story_template_id': 'story_template_id',
        'external_links': 'external_links',
        'previous_iteration_ids': 'previous_iteration_ids',
        'requested_by_id': 'requested_by_id',
        'iteration_id': 'iteration_id',
        'label_ids': 'label_ids',
        'started_at_override': 'started_at_override',
        'group_id': 'group_id',
        'workflow_state_id': 'workflow_state_id',
        'updated_at': 'updated_at',
        'group_mention_ids': 'group_mention_ids',
        'follower_ids': 'follower_ids',
        'owner_ids': 'owner_ids',
        'external_id': 'external_id',
        'id': 'id',
        'lead_time': 'lead_time',
        'estimate': 'estimate',
        'position': 'position',
        'blocked': 'blocked',
        'project_id': 'project_id',
        'linked_file_ids': 'linked_file_ids',
        'deadline': 'deadline',
        'stats': 'stats',
        'comment_ids': 'comment_ids',
        'cycle_time': 'cycle_time',
        'created_at': 'created_at',
        'moved_at': 'moved_at'
    }

    def __init__(self, app_url=None, description=None, archived=None, started=None, story_links=None, entity_type=None, labels=None, task_ids=None, mention_ids=None, member_mention_ids=None, story_type=None, custom_fields=None, file_ids=None, num_tasks_completed=None, workflow_id=None, completed_at_override=None, started_at=None, completed_at=None, name=None, completed=None, blocker=None, epic_id=None, story_template_id=None, external_links=None, previous_iteration_ids=None, requested_by_id=None, iteration_id=None, label_ids=None, started_at_override=None, group_id=None, workflow_state_id=None, updated_at=None, group_mention_ids=None, follower_ids=None, owner_ids=None, external_id=None, id=None, lead_time=None, estimate=None, position=None, blocked=None, project_id=None, linked_file_ids=None, deadline=None, stats=None, comment_ids=None, cycle_time=None, created_at=None, moved_at=None):  # noqa: E501
        """StorySlim - a model defined in Swagger"""  # noqa: E501
        self._app_url = None
        self._description = None
        self._archived = None
        self._started = None
        self._story_links = None
        self._entity_type = None
        self._labels = None
        self._task_ids = None
        self._mention_ids = None
        self._member_mention_ids = None
        self._story_type = None
        self._custom_fields = None
        self._file_ids = None
        self._num_tasks_completed = None
        self._workflow_id = None
        self._completed_at_override = None
        self._started_at = None
        self._completed_at = None
        self._name = None
        self._completed = None
        self._blocker = None
        self._epic_id = None
        self._story_template_id = None
        self._external_links = None
        self._previous_iteration_ids = None
        self._requested_by_id = None
        self._iteration_id = None
        self._label_ids = None
        self._started_at_override = None
        self._group_id = None
        self._workflow_state_id = None
        self._updated_at = None
        self._group_mention_ids = None
        self._follower_ids = None
        self._owner_ids = None
        self._external_id = None
        self._id = None
        self._lead_time = None
        self._estimate = None
        self._position = None
        self._blocked = None
        self._project_id = None
        self._linked_file_ids = None
        self._deadline = None
        self._stats = None
        self._comment_ids = None
        self._cycle_time = None
        self._created_at = None
        self._moved_at = None
        self.discriminator = None
        self.app_url = app_url
        if description is not None:
            self.description = description
        self.archived = archived
        self.started = started
        self.story_links = story_links
        self.entity_type = entity_type
        self.labels = labels
        self.task_ids = task_ids
        self.mention_ids = mention_ids
        self.member_mention_ids = member_mention_ids
        self.story_type = story_type
        if custom_fields is not None:
            self.custom_fields = custom_fields
        self.file_ids = file_ids
        self.num_tasks_completed = num_tasks_completed
        self.workflow_id = workflow_id
        self.completed_at_override = completed_at_override
        self.started_at = started_at
        self.completed_at = completed_at
        self.name = name
        self.completed = completed
        self.blocker = blocker
        self.epic_id = epic_id
        self.story_template_id = story_template_id
        self.external_links = external_links
        self.previous_iteration_ids = previous_iteration_ids
        self.requested_by_id = requested_by_id
        self.iteration_id = iteration_id
        self.label_ids = label_ids
        self.started_at_override = started_at_override
        self.group_id = group_id
        self.workflow_state_id = workflow_state_id
        self.updated_at = updated_at
        self.group_mention_ids = group_mention_ids
        self.follower_ids = follower_ids
        self.owner_ids = owner_ids
        self.external_id = external_id
        self.id = id
        if lead_time is not None:
            self.lead_time = lead_time
        self.estimate = estimate
        self.position = position
        self.blocked = blocked
        self.project_id = project_id
        self.linked_file_ids = linked_file_ids
        self.deadline = deadline
        self.stats = stats
        self.comment_ids = comment_ids
        if cycle_time is not None:
            self.cycle_time = cycle_time
        self.created_at = created_at
        self.moved_at = moved_at

    @property
    def app_url(self):
        """Gets the app_url of this StorySlim.  # noqa: E501

        The Shortcut application url for the Story.  # noqa: E501

        :return: The app_url of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._app_url

    @app_url.setter
    def app_url(self, app_url):
        """Sets the app_url of this StorySlim.

        The Shortcut application url for the Story.  # noqa: E501

        :param app_url: The app_url of this StorySlim.  # noqa: E501
        :type: str
        """
        if app_url is None:
            raise ValueError("Invalid value for `app_url`, must not be `None`")  # noqa: E501

        self._app_url = app_url

    @property
    def description(self):
        """Gets the description of this StorySlim.  # noqa: E501

        The description of the Story.  # noqa: E501

        :return: The description of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorySlim.

        The description of the Story.  # noqa: E501

        :param description: The description of this StorySlim.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def archived(self):
        """Gets the archived of this StorySlim.  # noqa: E501

        True if the story has been archived or not.  # noqa: E501

        :return: The archived of this StorySlim.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this StorySlim.

        True if the story has been archived or not.  # noqa: E501

        :param archived: The archived of this StorySlim.  # noqa: E501
        :type: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def started(self):
        """Gets the started of this StorySlim.  # noqa: E501

        A true/false boolean indicating if the Story has been started.  # noqa: E501

        :return: The started of this StorySlim.  # noqa: E501
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this StorySlim.

        A true/false boolean indicating if the Story has been started.  # noqa: E501

        :param started: The started of this StorySlim.  # noqa: E501
        :type: bool
        """
        if started is None:
            raise ValueError("Invalid value for `started`, must not be `None`")  # noqa: E501

        self._started = started

    @property
    def story_links(self):
        """Gets the story_links of this StorySlim.  # noqa: E501

        An array of story links attached to the Story.  # noqa: E501

        :return: The story_links of this StorySlim.  # noqa: E501
        :rtype: list[TypedStoryLink]
        """
        return self._story_links

    @story_links.setter
    def story_links(self, story_links):
        """Sets the story_links of this StorySlim.

        An array of story links attached to the Story.  # noqa: E501

        :param story_links: The story_links of this StorySlim.  # noqa: E501
        :type: list[TypedStoryLink]
        """
        if story_links is None:
            raise ValueError("Invalid value for `story_links`, must not be `None`")  # noqa: E501

        self._story_links = story_links

    @property
    def entity_type(self):
        """Gets the entity_type of this StorySlim.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this StorySlim.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this StorySlim.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def labels(self):
        """Gets the labels of this StorySlim.  # noqa: E501

        An array of labels attached to the story.  # noqa: E501

        :return: The labels of this StorySlim.  # noqa: E501
        :rtype: list[LabelSlim]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this StorySlim.

        An array of labels attached to the story.  # noqa: E501

        :param labels: The labels of this StorySlim.  # noqa: E501
        :type: list[LabelSlim]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def task_ids(self):
        """Gets the task_ids of this StorySlim.  # noqa: E501

        An array of IDs of Tasks attached to the story.  # noqa: E501

        :return: The task_ids of this StorySlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids):
        """Sets the task_ids of this StorySlim.

        An array of IDs of Tasks attached to the story.  # noqa: E501

        :param task_ids: The task_ids of this StorySlim.  # noqa: E501
        :type: list[int]
        """
        if task_ids is None:
            raise ValueError("Invalid value for `task_ids`, must not be `None`")  # noqa: E501

        self._task_ids = task_ids

    @property
    def mention_ids(self):
        """Gets the mention_ids of this StorySlim.  # noqa: E501

        Deprecated: use member_mention_ids.  # noqa: E501

        :return: The mention_ids of this StorySlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._mention_ids

    @mention_ids.setter
    def mention_ids(self, mention_ids):
        """Sets the mention_ids of this StorySlim.

        Deprecated: use member_mention_ids.  # noqa: E501

        :param mention_ids: The mention_ids of this StorySlim.  # noqa: E501
        :type: list[str]
        """
        if mention_ids is None:
            raise ValueError("Invalid value for `mention_ids`, must not be `None`")  # noqa: E501

        self._mention_ids = mention_ids

    @property
    def member_mention_ids(self):
        """Gets the member_mention_ids of this StorySlim.  # noqa: E501

        An array of Member IDs that have been mentioned in the Story description.  # noqa: E501

        :return: The member_mention_ids of this StorySlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_mention_ids

    @member_mention_ids.setter
    def member_mention_ids(self, member_mention_ids):
        """Sets the member_mention_ids of this StorySlim.

        An array of Member IDs that have been mentioned in the Story description.  # noqa: E501

        :param member_mention_ids: The member_mention_ids of this StorySlim.  # noqa: E501
        :type: list[str]
        """
        if member_mention_ids is None:
            raise ValueError("Invalid value for `member_mention_ids`, must not be `None`")  # noqa: E501

        self._member_mention_ids = member_mention_ids

    @property
    def story_type(self):
        """Gets the story_type of this StorySlim.  # noqa: E501

        The type of story (feature, bug, chore).  # noqa: E501

        :return: The story_type of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._story_type

    @story_type.setter
    def story_type(self, story_type):
        """Sets the story_type of this StorySlim.

        The type of story (feature, bug, chore).  # noqa: E501

        :param story_type: The story_type of this StorySlim.  # noqa: E501
        :type: str
        """
        if story_type is None:
            raise ValueError("Invalid value for `story_type`, must not be `None`")  # noqa: E501

        self._story_type = story_type

    @property
    def custom_fields(self):
        """Gets the custom_fields of this StorySlim.  # noqa: E501

        An array of CustomField value assertions for the story.  # noqa: E501

        :return: The custom_fields of this StorySlim.  # noqa: E501
        :rtype: list[StoryCustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this StorySlim.

        An array of CustomField value assertions for the story.  # noqa: E501

        :param custom_fields: The custom_fields of this StorySlim.  # noqa: E501
        :type: list[StoryCustomField]
        """

        self._custom_fields = custom_fields

    @property
    def file_ids(self):
        """Gets the file_ids of this StorySlim.  # noqa: E501

        An array of IDs of Files attached to the story.  # noqa: E501

        :return: The file_ids of this StorySlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this StorySlim.

        An array of IDs of Files attached to the story.  # noqa: E501

        :param file_ids: The file_ids of this StorySlim.  # noqa: E501
        :type: list[int]
        """
        if file_ids is None:
            raise ValueError("Invalid value for `file_ids`, must not be `None`")  # noqa: E501

        self._file_ids = file_ids

    @property
    def num_tasks_completed(self):
        """Gets the num_tasks_completed of this StorySlim.  # noqa: E501

        The number of tasks on the story which are complete.  # noqa: E501

        :return: The num_tasks_completed of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._num_tasks_completed

    @num_tasks_completed.setter
    def num_tasks_completed(self, num_tasks_completed):
        """Sets the num_tasks_completed of this StorySlim.

        The number of tasks on the story which are complete.  # noqa: E501

        :param num_tasks_completed: The num_tasks_completed of this StorySlim.  # noqa: E501
        :type: int
        """
        if num_tasks_completed is None:
            raise ValueError("Invalid value for `num_tasks_completed`, must not be `None`")  # noqa: E501

        self._num_tasks_completed = num_tasks_completed

    @property
    def workflow_id(self):
        """Gets the workflow_id of this StorySlim.  # noqa: E501

        The ID of the workflow the story belongs to.  # noqa: E501

        :return: The workflow_id of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this StorySlim.

        The ID of the workflow the story belongs to.  # noqa: E501

        :param workflow_id: The workflow_id of this StorySlim.  # noqa: E501
        :type: int
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def completed_at_override(self):
        """Gets the completed_at_override of this StorySlim.  # noqa: E501

        A manual override for the time/date the Story was completed.  # noqa: E501

        :return: The completed_at_override of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at_override

    @completed_at_override.setter
    def completed_at_override(self, completed_at_override):
        """Sets the completed_at_override of this StorySlim.

        A manual override for the time/date the Story was completed.  # noqa: E501

        :param completed_at_override: The completed_at_override of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if completed_at_override is None:
            raise ValueError("Invalid value for `completed_at_override`, must not be `None`")  # noqa: E501

        self._completed_at_override = completed_at_override

    @property
    def started_at(self):
        """Gets the started_at of this StorySlim.  # noqa: E501

        The time/date the Story was started.  # noqa: E501

        :return: The started_at of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this StorySlim.

        The time/date the Story was started.  # noqa: E501

        :param started_at: The started_at of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this StorySlim.  # noqa: E501

        The time/date the Story was completed.  # noqa: E501

        :return: The completed_at of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this StorySlim.

        The time/date the Story was completed.  # noqa: E501

        :param completed_at: The completed_at of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")  # noqa: E501

        self._completed_at = completed_at

    @property
    def name(self):
        """Gets the name of this StorySlim.  # noqa: E501

        The name of the story.  # noqa: E501

        :return: The name of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorySlim.

        The name of the story.  # noqa: E501

        :param name: The name of this StorySlim.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def completed(self):
        """Gets the completed of this StorySlim.  # noqa: E501

        A true/false boolean indicating if the Story has been completed.  # noqa: E501

        :return: The completed of this StorySlim.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this StorySlim.

        A true/false boolean indicating if the Story has been completed.  # noqa: E501

        :param completed: The completed of this StorySlim.  # noqa: E501
        :type: bool
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def blocker(self):
        """Gets the blocker of this StorySlim.  # noqa: E501

        A true/false boolean indicating if the Story is currently a blocker of another story.  # noqa: E501

        :return: The blocker of this StorySlim.  # noqa: E501
        :rtype: bool
        """
        return self._blocker

    @blocker.setter
    def blocker(self, blocker):
        """Sets the blocker of this StorySlim.

        A true/false boolean indicating if the Story is currently a blocker of another story.  # noqa: E501

        :param blocker: The blocker of this StorySlim.  # noqa: E501
        :type: bool
        """
        if blocker is None:
            raise ValueError("Invalid value for `blocker`, must not be `None`")  # noqa: E501

        self._blocker = blocker

    @property
    def epic_id(self):
        """Gets the epic_id of this StorySlim.  # noqa: E501

        The ID of the epic the story belongs to.  # noqa: E501

        :return: The epic_id of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._epic_id

    @epic_id.setter
    def epic_id(self, epic_id):
        """Sets the epic_id of this StorySlim.

        The ID of the epic the story belongs to.  # noqa: E501

        :param epic_id: The epic_id of this StorySlim.  # noqa: E501
        :type: int
        """
        if epic_id is None:
            raise ValueError("Invalid value for `epic_id`, must not be `None`")  # noqa: E501

        self._epic_id = epic_id

    @property
    def story_template_id(self):
        """Gets the story_template_id of this StorySlim.  # noqa: E501

        The ID of the story template used to create this story, or null if not created using a template.  # noqa: E501

        :return: The story_template_id of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._story_template_id

    @story_template_id.setter
    def story_template_id(self, story_template_id):
        """Sets the story_template_id of this StorySlim.

        The ID of the story template used to create this story, or null if not created using a template.  # noqa: E501

        :param story_template_id: The story_template_id of this StorySlim.  # noqa: E501
        :type: str
        """
        if story_template_id is None:
            raise ValueError("Invalid value for `story_template_id`, must not be `None`")  # noqa: E501

        self._story_template_id = story_template_id

    @property
    def external_links(self):
        """Gets the external_links of this StorySlim.  # noqa: E501

        An array of external links (strings) associated with a Story  # noqa: E501

        :return: The external_links of this StorySlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """Sets the external_links of this StorySlim.

        An array of external links (strings) associated with a Story  # noqa: E501

        :param external_links: The external_links of this StorySlim.  # noqa: E501
        :type: list[str]
        """
        if external_links is None:
            raise ValueError("Invalid value for `external_links`, must not be `None`")  # noqa: E501

        self._external_links = external_links

    @property
    def previous_iteration_ids(self):
        """Gets the previous_iteration_ids of this StorySlim.  # noqa: E501

        The IDs of the iteration the story belongs to.  # noqa: E501

        :return: The previous_iteration_ids of this StorySlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._previous_iteration_ids

    @previous_iteration_ids.setter
    def previous_iteration_ids(self, previous_iteration_ids):
        """Sets the previous_iteration_ids of this StorySlim.

        The IDs of the iteration the story belongs to.  # noqa: E501

        :param previous_iteration_ids: The previous_iteration_ids of this StorySlim.  # noqa: E501
        :type: list[int]
        """
        if previous_iteration_ids is None:
            raise ValueError("Invalid value for `previous_iteration_ids`, must not be `None`")  # noqa: E501

        self._previous_iteration_ids = previous_iteration_ids

    @property
    def requested_by_id(self):
        """Gets the requested_by_id of this StorySlim.  # noqa: E501

        The ID of the Member that requested the story.  # noqa: E501

        :return: The requested_by_id of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._requested_by_id

    @requested_by_id.setter
    def requested_by_id(self, requested_by_id):
        """Sets the requested_by_id of this StorySlim.

        The ID of the Member that requested the story.  # noqa: E501

        :param requested_by_id: The requested_by_id of this StorySlim.  # noqa: E501
        :type: str
        """
        if requested_by_id is None:
            raise ValueError("Invalid value for `requested_by_id`, must not be `None`")  # noqa: E501

        self._requested_by_id = requested_by_id

    @property
    def iteration_id(self):
        """Gets the iteration_id of this StorySlim.  # noqa: E501

        The ID of the iteration the story belongs to.  # noqa: E501

        :return: The iteration_id of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._iteration_id

    @iteration_id.setter
    def iteration_id(self, iteration_id):
        """Sets the iteration_id of this StorySlim.

        The ID of the iteration the story belongs to.  # noqa: E501

        :param iteration_id: The iteration_id of this StorySlim.  # noqa: E501
        :type: int
        """
        if iteration_id is None:
            raise ValueError("Invalid value for `iteration_id`, must not be `None`")  # noqa: E501

        self._iteration_id = iteration_id

    @property
    def label_ids(self):
        """Gets the label_ids of this StorySlim.  # noqa: E501

        An array of label ids attached to the story.  # noqa: E501

        :return: The label_ids of this StorySlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this StorySlim.

        An array of label ids attached to the story.  # noqa: E501

        :param label_ids: The label_ids of this StorySlim.  # noqa: E501
        :type: list[int]
        """
        if label_ids is None:
            raise ValueError("Invalid value for `label_ids`, must not be `None`")  # noqa: E501

        self._label_ids = label_ids

    @property
    def started_at_override(self):
        """Gets the started_at_override of this StorySlim.  # noqa: E501

        A manual override for the time/date the Story was started.  # noqa: E501

        :return: The started_at_override of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at_override

    @started_at_override.setter
    def started_at_override(self, started_at_override):
        """Sets the started_at_override of this StorySlim.

        A manual override for the time/date the Story was started.  # noqa: E501

        :param started_at_override: The started_at_override of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if started_at_override is None:
            raise ValueError("Invalid value for `started_at_override`, must not be `None`")  # noqa: E501

        self._started_at_override = started_at_override

    @property
    def group_id(self):
        """Gets the group_id of this StorySlim.  # noqa: E501

        The ID of the group associated with the story.  # noqa: E501

        :return: The group_id of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this StorySlim.

        The ID of the group associated with the story.  # noqa: E501

        :param group_id: The group_id of this StorySlim.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def workflow_state_id(self):
        """Gets the workflow_state_id of this StorySlim.  # noqa: E501

        The ID of the workflow state the story is currently in.  # noqa: E501

        :return: The workflow_state_id of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._workflow_state_id

    @workflow_state_id.setter
    def workflow_state_id(self, workflow_state_id):
        """Sets the workflow_state_id of this StorySlim.

        The ID of the workflow state the story is currently in.  # noqa: E501

        :param workflow_state_id: The workflow_state_id of this StorySlim.  # noqa: E501
        :type: int
        """
        if workflow_state_id is None:
            raise ValueError("Invalid value for `workflow_state_id`, must not be `None`")  # noqa: E501

        self._workflow_state_id = workflow_state_id

    @property
    def updated_at(self):
        """Gets the updated_at of this StorySlim.  # noqa: E501

        The time/date the Story was updated.  # noqa: E501

        :return: The updated_at of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StorySlim.

        The time/date the Story was updated.  # noqa: E501

        :param updated_at: The updated_at of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def group_mention_ids(self):
        """Gets the group_mention_ids of this StorySlim.  # noqa: E501

        An array of Group IDs that have been mentioned in the Story description.  # noqa: E501

        :return: The group_mention_ids of this StorySlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_mention_ids

    @group_mention_ids.setter
    def group_mention_ids(self, group_mention_ids):
        """Sets the group_mention_ids of this StorySlim.

        An array of Group IDs that have been mentioned in the Story description.  # noqa: E501

        :param group_mention_ids: The group_mention_ids of this StorySlim.  # noqa: E501
        :type: list[str]
        """
        if group_mention_ids is None:
            raise ValueError("Invalid value for `group_mention_ids`, must not be `None`")  # noqa: E501

        self._group_mention_ids = group_mention_ids

    @property
    def follower_ids(self):
        """Gets the follower_ids of this StorySlim.  # noqa: E501

        An array of UUIDs for any Members listed as Followers.  # noqa: E501

        :return: The follower_ids of this StorySlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._follower_ids

    @follower_ids.setter
    def follower_ids(self, follower_ids):
        """Sets the follower_ids of this StorySlim.

        An array of UUIDs for any Members listed as Followers.  # noqa: E501

        :param follower_ids: The follower_ids of this StorySlim.  # noqa: E501
        :type: list[str]
        """
        if follower_ids is None:
            raise ValueError("Invalid value for `follower_ids`, must not be `None`")  # noqa: E501

        self._follower_ids = follower_ids

    @property
    def owner_ids(self):
        """Gets the owner_ids of this StorySlim.  # noqa: E501

        An array of UUIDs of the owners of this story.  # noqa: E501

        :return: The owner_ids of this StorySlim.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this StorySlim.

        An array of UUIDs of the owners of this story.  # noqa: E501

        :param owner_ids: The owner_ids of this StorySlim.  # noqa: E501
        :type: list[str]
        """
        if owner_ids is None:
            raise ValueError("Invalid value for `owner_ids`, must not be `None`")  # noqa: E501

        self._owner_ids = owner_ids

    @property
    def external_id(self):
        """Gets the external_id of this StorySlim.  # noqa: E501

        This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :return: The external_id of this StorySlim.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this StorySlim.

        This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :param external_id: The external_id of this StorySlim.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this StorySlim.  # noqa: E501

        The unique ID of the Story.  # noqa: E501

        :return: The id of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorySlim.

        The unique ID of the Story.  # noqa: E501

        :param id: The id of this StorySlim.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def lead_time(self):
        """Gets the lead_time of this StorySlim.  # noqa: E501

        The lead time (in seconds) of this story when complete.  # noqa: E501

        :return: The lead_time of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._lead_time

    @lead_time.setter
    def lead_time(self, lead_time):
        """Sets the lead_time of this StorySlim.

        The lead time (in seconds) of this story when complete.  # noqa: E501

        :param lead_time: The lead_time of this StorySlim.  # noqa: E501
        :type: int
        """

        self._lead_time = lead_time

    @property
    def estimate(self):
        """Gets the estimate of this StorySlim.  # noqa: E501

        The numeric point estimate of the story. Can also be null, which means unestimated.  # noqa: E501

        :return: The estimate of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate):
        """Sets the estimate of this StorySlim.

        The numeric point estimate of the story. Can also be null, which means unestimated.  # noqa: E501

        :param estimate: The estimate of this StorySlim.  # noqa: E501
        :type: int
        """
        if estimate is None:
            raise ValueError("Invalid value for `estimate`, must not be `None`")  # noqa: E501

        self._estimate = estimate

    @property
    def position(self):
        """Gets the position of this StorySlim.  # noqa: E501

        A number representing the position of the story in relation to every other story in the current project.  # noqa: E501

        :return: The position of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StorySlim.

        A number representing the position of the story in relation to every other story in the current project.  # noqa: E501

        :param position: The position of this StorySlim.  # noqa: E501
        :type: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def blocked(self):
        """Gets the blocked of this StorySlim.  # noqa: E501

        A true/false boolean indicating if the Story is currently blocked.  # noqa: E501

        :return: The blocked of this StorySlim.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this StorySlim.

        A true/false boolean indicating if the Story is currently blocked.  # noqa: E501

        :param blocked: The blocked of this StorySlim.  # noqa: E501
        :type: bool
        """
        if blocked is None:
            raise ValueError("Invalid value for `blocked`, must not be `None`")  # noqa: E501

        self._blocked = blocked

    @property
    def project_id(self):
        """Gets the project_id of this StorySlim.  # noqa: E501

        The ID of the project the story belongs to.  # noqa: E501

        :return: The project_id of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StorySlim.

        The ID of the project the story belongs to.  # noqa: E501

        :param project_id: The project_id of this StorySlim.  # noqa: E501
        :type: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def linked_file_ids(self):
        """Gets the linked_file_ids of this StorySlim.  # noqa: E501

        An array of IDs of LinkedFiles attached to the story.  # noqa: E501

        :return: The linked_file_ids of this StorySlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._linked_file_ids

    @linked_file_ids.setter
    def linked_file_ids(self, linked_file_ids):
        """Sets the linked_file_ids of this StorySlim.

        An array of IDs of LinkedFiles attached to the story.  # noqa: E501

        :param linked_file_ids: The linked_file_ids of this StorySlim.  # noqa: E501
        :type: list[int]
        """
        if linked_file_ids is None:
            raise ValueError("Invalid value for `linked_file_ids`, must not be `None`")  # noqa: E501

        self._linked_file_ids = linked_file_ids

    @property
    def deadline(self):
        """Gets the deadline of this StorySlim.  # noqa: E501

        The due date of the story.  # noqa: E501

        :return: The deadline of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this StorySlim.

        The due date of the story.  # noqa: E501

        :param deadline: The deadline of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if deadline is None:
            raise ValueError("Invalid value for `deadline`, must not be `None`")  # noqa: E501

        self._deadline = deadline

    @property
    def stats(self):
        """Gets the stats of this StorySlim.  # noqa: E501


        :return: The stats of this StorySlim.  # noqa: E501
        :rtype: StoryStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this StorySlim.


        :param stats: The stats of this StorySlim.  # noqa: E501
        :type: StoryStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats

    @property
    def comment_ids(self):
        """Gets the comment_ids of this StorySlim.  # noqa: E501

        An array of IDs of Comments attached to the story.  # noqa: E501

        :return: The comment_ids of this StorySlim.  # noqa: E501
        :rtype: list[int]
        """
        return self._comment_ids

    @comment_ids.setter
    def comment_ids(self, comment_ids):
        """Sets the comment_ids of this StorySlim.

        An array of IDs of Comments attached to the story.  # noqa: E501

        :param comment_ids: The comment_ids of this StorySlim.  # noqa: E501
        :type: list[int]
        """
        if comment_ids is None:
            raise ValueError("Invalid value for `comment_ids`, must not be `None`")  # noqa: E501

        self._comment_ids = comment_ids

    @property
    def cycle_time(self):
        """Gets the cycle_time of this StorySlim.  # noqa: E501

        The cycle time (in seconds) of this story when complete.  # noqa: E501

        :return: The cycle_time of this StorySlim.  # noqa: E501
        :rtype: int
        """
        return self._cycle_time

    @cycle_time.setter
    def cycle_time(self, cycle_time):
        """Sets the cycle_time of this StorySlim.

        The cycle time (in seconds) of this story when complete.  # noqa: E501

        :param cycle_time: The cycle_time of this StorySlim.  # noqa: E501
        :type: int
        """

        self._cycle_time = cycle_time

    @property
    def created_at(self):
        """Gets the created_at of this StorySlim.  # noqa: E501

        The time/date the Story was created.  # noqa: E501

        :return: The created_at of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StorySlim.

        The time/date the Story was created.  # noqa: E501

        :param created_at: The created_at of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def moved_at(self):
        """Gets the moved_at of this StorySlim.  # noqa: E501

        The time/date the Story was last changed workflow-state.  # noqa: E501

        :return: The moved_at of this StorySlim.  # noqa: E501
        :rtype: datetime
        """
        return self._moved_at

    @moved_at.setter
    def moved_at(self, moved_at):
        """Sets the moved_at of this StorySlim.

        The time/date the Story was last changed workflow-state.  # noqa: E501

        :param moved_at: The moved_at of this StorySlim.  # noqa: E501
        :type: datetime
        """
        if moved_at is None:
            raise ValueError("Invalid value for `moved_at`, must not be `None`")  # noqa: E501

        self._moved_at = moved_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorySlim, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorySlim):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
