# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateEntityTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'author_id': 'str',
        'story_contents': 'CreateStoryContents'
    }

    attribute_map = {
        'name': 'name',
        'author_id': 'author_id',
        'story_contents': 'story_contents'
    }

    def __init__(self, name=None, author_id=None, story_contents=None):  # noqa: E501
        """CreateEntityTemplate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._author_id = None
        self._story_contents = None
        self.discriminator = None
        self.name = name
        if author_id is not None:
            self.author_id = author_id
        self.story_contents = story_contents

    @property
    def name(self):
        """Gets the name of this CreateEntityTemplate.  # noqa: E501

        The name of the new entity template  # noqa: E501

        :return: The name of this CreateEntityTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEntityTemplate.

        The name of the new entity template  # noqa: E501

        :param name: The name of this CreateEntityTemplate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def author_id(self):
        """Gets the author_id of this CreateEntityTemplate.  # noqa: E501

        The id of the user creating this template.  # noqa: E501

        :return: The author_id of this CreateEntityTemplate.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this CreateEntityTemplate.

        The id of the user creating this template.  # noqa: E501

        :param author_id: The author_id of this CreateEntityTemplate.  # noqa: E501
        :type: str
        """

        self._author_id = author_id

    @property
    def story_contents(self):
        """Gets the story_contents of this CreateEntityTemplate.  # noqa: E501


        :return: The story_contents of this CreateEntityTemplate.  # noqa: E501
        :rtype: CreateStoryContents
        """
        return self._story_contents

    @story_contents.setter
    def story_contents(self, story_contents):
        """Sets the story_contents of this CreateEntityTemplate.


        :param story_contents: The story_contents of this CreateEntityTemplate.  # noqa: E501
        :type: CreateStoryContents
        """
        if story_contents is None:
            raise ValueError("Invalid value for `story_contents`, must not be `None`")  # noqa: E501

        self._story_contents = story_contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateEntityTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateEntityTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
