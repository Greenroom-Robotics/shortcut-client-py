# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'entity_type': 'str',
        'story_id': 'int',
        'mention_ids': 'list[str]',
        'member_mention_ids': 'list[str]',
        'completed_at': 'datetime',
        'updated_at': 'datetime',
        'group_mention_ids': 'list[str]',
        'owner_ids': 'list[str]',
        'external_id': 'str',
        'id': 'int',
        'position': 'int',
        'complete': 'bool',
        'created_at': 'datetime'
    }

    attribute_map = {
        'description': 'description',
        'entity_type': 'entity_type',
        'story_id': 'story_id',
        'mention_ids': 'mention_ids',
        'member_mention_ids': 'member_mention_ids',
        'completed_at': 'completed_at',
        'updated_at': 'updated_at',
        'group_mention_ids': 'group_mention_ids',
        'owner_ids': 'owner_ids',
        'external_id': 'external_id',
        'id': 'id',
        'position': 'position',
        'complete': 'complete',
        'created_at': 'created_at'
    }

    def __init__(self, description=None, entity_type=None, story_id=None, mention_ids=None, member_mention_ids=None, completed_at=None, updated_at=None, group_mention_ids=None, owner_ids=None, external_id=None, id=None, position=None, complete=None, created_at=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._entity_type = None
        self._story_id = None
        self._mention_ids = None
        self._member_mention_ids = None
        self._completed_at = None
        self._updated_at = None
        self._group_mention_ids = None
        self._owner_ids = None
        self._external_id = None
        self._id = None
        self._position = None
        self._complete = None
        self._created_at = None
        self.discriminator = None
        self.description = description
        self.entity_type = entity_type
        self.story_id = story_id
        self.mention_ids = mention_ids
        self.member_mention_ids = member_mention_ids
        self.completed_at = completed_at
        self.updated_at = updated_at
        self.group_mention_ids = group_mention_ids
        self.owner_ids = owner_ids
        self.external_id = external_id
        self.id = id
        self.position = position
        self.complete = complete
        self.created_at = created_at

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501

        Full text of the Task.  # noqa: E501

        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.

        Full text of the Task.  # noqa: E501

        :param description: The description of this Task.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def entity_type(self):
        """Gets the entity_type of this Task.  # noqa: E501

        A string description of this resource.  # noqa: E501

        :return: The entity_type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Task.

        A string description of this resource.  # noqa: E501

        :param entity_type: The entity_type of this Task.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def story_id(self):
        """Gets the story_id of this Task.  # noqa: E501

        The unique identifier of the parent Story.  # noqa: E501

        :return: The story_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._story_id

    @story_id.setter
    def story_id(self, story_id):
        """Sets the story_id of this Task.

        The unique identifier of the parent Story.  # noqa: E501

        :param story_id: The story_id of this Task.  # noqa: E501
        :type: int
        """
        if story_id is None:
            raise ValueError("Invalid value for `story_id`, must not be `None`")  # noqa: E501

        self._story_id = story_id

    @property
    def mention_ids(self):
        """Gets the mention_ids of this Task.  # noqa: E501

        Deprecated: use member_mention_ids.  # noqa: E501

        :return: The mention_ids of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._mention_ids

    @mention_ids.setter
    def mention_ids(self, mention_ids):
        """Sets the mention_ids of this Task.

        Deprecated: use member_mention_ids.  # noqa: E501

        :param mention_ids: The mention_ids of this Task.  # noqa: E501
        :type: list[str]
        """
        if mention_ids is None:
            raise ValueError("Invalid value for `mention_ids`, must not be `None`")  # noqa: E501

        self._mention_ids = mention_ids

    @property
    def member_mention_ids(self):
        """Gets the member_mention_ids of this Task.  # noqa: E501

        An array of UUIDs of Members mentioned in this Task.  # noqa: E501

        :return: The member_mention_ids of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_mention_ids

    @member_mention_ids.setter
    def member_mention_ids(self, member_mention_ids):
        """Sets the member_mention_ids of this Task.

        An array of UUIDs of Members mentioned in this Task.  # noqa: E501

        :param member_mention_ids: The member_mention_ids of this Task.  # noqa: E501
        :type: list[str]
        """
        if member_mention_ids is None:
            raise ValueError("Invalid value for `member_mention_ids`, must not be `None`")  # noqa: E501

        self._member_mention_ids = member_mention_ids

    @property
    def completed_at(self):
        """Gets the completed_at of this Task.  # noqa: E501

        The time/date the Task was completed.  # noqa: E501

        :return: The completed_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Task.

        The time/date the Task was completed.  # noqa: E501

        :param completed_at: The completed_at of this Task.  # noqa: E501
        :type: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")  # noqa: E501

        self._completed_at = completed_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.  # noqa: E501

        The time/date the Task was updated.  # noqa: E501

        :return: The updated_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.

        The time/date the Task was updated.  # noqa: E501

        :param updated_at: The updated_at of this Task.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def group_mention_ids(self):
        """Gets the group_mention_ids of this Task.  # noqa: E501

        An array of UUIDs of Groups mentioned in this Task.  # noqa: E501

        :return: The group_mention_ids of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_mention_ids

    @group_mention_ids.setter
    def group_mention_ids(self, group_mention_ids):
        """Sets the group_mention_ids of this Task.

        An array of UUIDs of Groups mentioned in this Task.  # noqa: E501

        :param group_mention_ids: The group_mention_ids of this Task.  # noqa: E501
        :type: list[str]
        """
        if group_mention_ids is None:
            raise ValueError("Invalid value for `group_mention_ids`, must not be `None`")  # noqa: E501

        self._group_mention_ids = group_mention_ids

    @property
    def owner_ids(self):
        """Gets the owner_ids of this Task.  # noqa: E501

        An array of UUIDs of the Owners of this Task.  # noqa: E501

        :return: The owner_ids of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this Task.

        An array of UUIDs of the Owners of this Task.  # noqa: E501

        :param owner_ids: The owner_ids of this Task.  # noqa: E501
        :type: list[str]
        """
        if owner_ids is None:
            raise ValueError("Invalid value for `owner_ids`, must not be `None`")  # noqa: E501

        self._owner_ids = owner_ids

    @property
    def external_id(self):
        """Gets the external_id of this Task.  # noqa: E501

        This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :return: The external_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Task.

        This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :param external_id: The external_id of this Task.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501

        The unique ID of the Task.  # noqa: E501

        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        The unique ID of the Task.  # noqa: E501

        :param id: The id of this Task.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def position(self):
        """Gets the position of this Task.  # noqa: E501

        The number corresponding to the Task's position within a list of Tasks on a Story.  # noqa: E501

        :return: The position of this Task.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Task.

        The number corresponding to the Task's position within a list of Tasks on a Story.  # noqa: E501

        :param position: The position of this Task.  # noqa: E501
        :type: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def complete(self):
        """Gets the complete of this Task.  # noqa: E501

        True/false boolean indicating whether the Task has been completed.  # noqa: E501

        :return: The complete of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Task.

        True/false boolean indicating whether the Task has been completed.  # noqa: E501

        :param complete: The complete of this Task.  # noqa: E501
        :type: bool
        """
        if complete is None:
            raise ValueError("Invalid value for `complete`, must not be `None`")  # noqa: E501

        self._complete = complete

    @property
    def created_at(self):
        """Gets the created_at of this Task.  # noqa: E501

        The time/date the Task was created.  # noqa: E501

        :return: The created_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.

        The time/date the Task was created.  # noqa: E501

        :param created_at: The created_at of this Task.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
