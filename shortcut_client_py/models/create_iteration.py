# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateIteration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'follower_ids': 'list[str]',
        'group_ids': 'list[str]',
        'labels': 'list[CreateLabelParams]',
        'description': 'str',
        'name': 'str',
        'start_date': 'str',
        'end_date': 'str'
    }

    attribute_map = {
        'follower_ids': 'follower_ids',
        'group_ids': 'group_ids',
        'labels': 'labels',
        'description': 'description',
        'name': 'name',
        'start_date': 'start_date',
        'end_date': 'end_date'
    }

    def __init__(self, follower_ids=None, group_ids=None, labels=None, description=None, name=None, start_date=None, end_date=None):  # noqa: E501
        """CreateIteration - a model defined in Swagger"""  # noqa: E501
        self._follower_ids = None
        self._group_ids = None
        self._labels = None
        self._description = None
        self._name = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None
        if follower_ids is not None:
            self.follower_ids = follower_ids
        if group_ids is not None:
            self.group_ids = group_ids
        if labels is not None:
            self.labels = labels
        if description is not None:
            self.description = description
        self.name = name
        self.start_date = start_date
        self.end_date = end_date

    @property
    def follower_ids(self):
        """Gets the follower_ids of this CreateIteration.  # noqa: E501

        An array of UUIDs for any Members you want to add as Followers.  # noqa: E501

        :return: The follower_ids of this CreateIteration.  # noqa: E501
        :rtype: list[str]
        """
        return self._follower_ids

    @follower_ids.setter
    def follower_ids(self, follower_ids):
        """Sets the follower_ids of this CreateIteration.

        An array of UUIDs for any Members you want to add as Followers.  # noqa: E501

        :param follower_ids: The follower_ids of this CreateIteration.  # noqa: E501
        :type: list[str]
        """

        self._follower_ids = follower_ids

    @property
    def group_ids(self):
        """Gets the group_ids of this CreateIteration.  # noqa: E501

        An array of UUIDs for any Groups you want to add as Followers. Currently, only one Group association is presented in our web UI.  # noqa: E501

        :return: The group_ids of this CreateIteration.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this CreateIteration.

        An array of UUIDs for any Groups you want to add as Followers. Currently, only one Group association is presented in our web UI.  # noqa: E501

        :param group_ids: The group_ids of this CreateIteration.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def labels(self):
        """Gets the labels of this CreateIteration.  # noqa: E501

        An array of Labels attached to the Iteration.  # noqa: E501

        :return: The labels of this CreateIteration.  # noqa: E501
        :rtype: list[CreateLabelParams]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateIteration.

        An array of Labels attached to the Iteration.  # noqa: E501

        :param labels: The labels of this CreateIteration.  # noqa: E501
        :type: list[CreateLabelParams]
        """

        self._labels = labels

    @property
    def description(self):
        """Gets the description of this CreateIteration.  # noqa: E501

        The description of the Iteration.  # noqa: E501

        :return: The description of this CreateIteration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateIteration.

        The description of the Iteration.  # noqa: E501

        :param description: The description of this CreateIteration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateIteration.  # noqa: E501

        The name of this Iteration.  # noqa: E501

        :return: The name of this CreateIteration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateIteration.

        The name of this Iteration.  # noqa: E501

        :param name: The name of this CreateIteration.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this CreateIteration.  # noqa: E501

        The date this Iteration begins, e.g. 2019-07-01.  # noqa: E501

        :return: The start_date of this CreateIteration.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateIteration.

        The date this Iteration begins, e.g. 2019-07-01.  # noqa: E501

        :param start_date: The start_date of this CreateIteration.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CreateIteration.  # noqa: E501

        The date this Iteration ends, e.g. 2019-07-01.  # noqa: E501

        :return: The end_date of this CreateIteration.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreateIteration.

        The date this Iteration ends, e.g. 2019-07-01.  # noqa: E501

        :param end_date: The end_date of this CreateIteration.  # noqa: E501
        :type: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateIteration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateIteration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
