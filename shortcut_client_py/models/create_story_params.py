# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateStoryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'archived': 'bool',
        'story_links': 'list[CreateStoryLinkParams]',
        'labels': 'list[CreateLabelParams]',
        'story_type': 'str',
        'custom_fields': 'list[CustomFieldValueParams]',
        'file_ids': 'list[int]',
        'completed_at_override': 'datetime',
        'name': 'str',
        'comments': 'list[CreateStoryCommentParams]',
        'epic_id': 'int',
        'story_template_id': 'str',
        'external_links': 'list[str]',
        'requested_by_id': 'str',
        'iteration_id': 'int',
        'tasks': 'list[CreateTaskParams]',
        'started_at_override': 'datetime',
        'group_id': 'str',
        'workflow_state_id': 'int',
        'updated_at': 'datetime',
        'follower_ids': 'list[str]',
        'owner_ids': 'list[str]',
        'external_id': 'str',
        'estimate': 'int',
        'project_id': 'int',
        'linked_file_ids': 'list[int]',
        'deadline': 'datetime',
        'created_at': 'datetime'
    }

    attribute_map = {
        'description': 'description',
        'archived': 'archived',
        'story_links': 'story_links',
        'labels': 'labels',
        'story_type': 'story_type',
        'custom_fields': 'custom_fields',
        'file_ids': 'file_ids',
        'completed_at_override': 'completed_at_override',
        'name': 'name',
        'comments': 'comments',
        'epic_id': 'epic_id',
        'story_template_id': 'story_template_id',
        'external_links': 'external_links',
        'requested_by_id': 'requested_by_id',
        'iteration_id': 'iteration_id',
        'tasks': 'tasks',
        'started_at_override': 'started_at_override',
        'group_id': 'group_id',
        'workflow_state_id': 'workflow_state_id',
        'updated_at': 'updated_at',
        'follower_ids': 'follower_ids',
        'owner_ids': 'owner_ids',
        'external_id': 'external_id',
        'estimate': 'estimate',
        'project_id': 'project_id',
        'linked_file_ids': 'linked_file_ids',
        'deadline': 'deadline',
        'created_at': 'created_at'
    }

    def __init__(self, description=None, archived=None, story_links=None, labels=None, story_type=None, custom_fields=None, file_ids=None, completed_at_override=None, name=None, comments=None, epic_id=None, story_template_id=None, external_links=None, requested_by_id=None, iteration_id=None, tasks=None, started_at_override=None, group_id=None, workflow_state_id=None, updated_at=None, follower_ids=None, owner_ids=None, external_id=None, estimate=None, project_id=None, linked_file_ids=None, deadline=None, created_at=None):  # noqa: E501
        """CreateStoryParams - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._archived = None
        self._story_links = None
        self._labels = None
        self._story_type = None
        self._custom_fields = None
        self._file_ids = None
        self._completed_at_override = None
        self._name = None
        self._comments = None
        self._epic_id = None
        self._story_template_id = None
        self._external_links = None
        self._requested_by_id = None
        self._iteration_id = None
        self._tasks = None
        self._started_at_override = None
        self._group_id = None
        self._workflow_state_id = None
        self._updated_at = None
        self._follower_ids = None
        self._owner_ids = None
        self._external_id = None
        self._estimate = None
        self._project_id = None
        self._linked_file_ids = None
        self._deadline = None
        self._created_at = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if archived is not None:
            self.archived = archived
        if story_links is not None:
            self.story_links = story_links
        if labels is not None:
            self.labels = labels
        if story_type is not None:
            self.story_type = story_type
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if file_ids is not None:
            self.file_ids = file_ids
        if completed_at_override is not None:
            self.completed_at_override = completed_at_override
        self.name = name
        if comments is not None:
            self.comments = comments
        if epic_id is not None:
            self.epic_id = epic_id
        if story_template_id is not None:
            self.story_template_id = story_template_id
        if external_links is not None:
            self.external_links = external_links
        if requested_by_id is not None:
            self.requested_by_id = requested_by_id
        if iteration_id is not None:
            self.iteration_id = iteration_id
        if tasks is not None:
            self.tasks = tasks
        if started_at_override is not None:
            self.started_at_override = started_at_override
        if group_id is not None:
            self.group_id = group_id
        if workflow_state_id is not None:
            self.workflow_state_id = workflow_state_id
        if updated_at is not None:
            self.updated_at = updated_at
        if follower_ids is not None:
            self.follower_ids = follower_ids
        if owner_ids is not None:
            self.owner_ids = owner_ids
        if external_id is not None:
            self.external_id = external_id
        if estimate is not None:
            self.estimate = estimate
        if project_id is not None:
            self.project_id = project_id
        if linked_file_ids is not None:
            self.linked_file_ids = linked_file_ids
        if deadline is not None:
            self.deadline = deadline
        if created_at is not None:
            self.created_at = created_at

    @property
    def description(self):
        """Gets the description of this CreateStoryParams.  # noqa: E501

        The description of the story.  # noqa: E501

        :return: The description of this CreateStoryParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateStoryParams.

        The description of the story.  # noqa: E501

        :param description: The description of this CreateStoryParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def archived(self):
        """Gets the archived of this CreateStoryParams.  # noqa: E501

        Controls the story's archived state.  # noqa: E501

        :return: The archived of this CreateStoryParams.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this CreateStoryParams.

        Controls the story's archived state.  # noqa: E501

        :param archived: The archived of this CreateStoryParams.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def story_links(self):
        """Gets the story_links of this CreateStoryParams.  # noqa: E501

        An array of story links attached to the story.  # noqa: E501

        :return: The story_links of this CreateStoryParams.  # noqa: E501
        :rtype: list[CreateStoryLinkParams]
        """
        return self._story_links

    @story_links.setter
    def story_links(self, story_links):
        """Sets the story_links of this CreateStoryParams.

        An array of story links attached to the story.  # noqa: E501

        :param story_links: The story_links of this CreateStoryParams.  # noqa: E501
        :type: list[CreateStoryLinkParams]
        """

        self._story_links = story_links

    @property
    def labels(self):
        """Gets the labels of this CreateStoryParams.  # noqa: E501

        An array of labels attached to the story.  # noqa: E501

        :return: The labels of this CreateStoryParams.  # noqa: E501
        :rtype: list[CreateLabelParams]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateStoryParams.

        An array of labels attached to the story.  # noqa: E501

        :param labels: The labels of this CreateStoryParams.  # noqa: E501
        :type: list[CreateLabelParams]
        """

        self._labels = labels

    @property
    def story_type(self):
        """Gets the story_type of this CreateStoryParams.  # noqa: E501

        The type of story (feature, bug, chore).  # noqa: E501

        :return: The story_type of this CreateStoryParams.  # noqa: E501
        :rtype: str
        """
        return self._story_type

    @story_type.setter
    def story_type(self, story_type):
        """Sets the story_type of this CreateStoryParams.

        The type of story (feature, bug, chore).  # noqa: E501

        :param story_type: The story_type of this CreateStoryParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["feature", "chore", "bug"]  # noqa: E501
        if story_type not in allowed_values:
            raise ValueError(
                "Invalid value for `story_type` ({0}), must be one of {1}"  # noqa: E501
                .format(story_type, allowed_values)
            )

        self._story_type = story_type

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CreateStoryParams.  # noqa: E501

        A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.  # noqa: E501

        :return: The custom_fields of this CreateStoryParams.  # noqa: E501
        :rtype: list[CustomFieldValueParams]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CreateStoryParams.

        A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.  # noqa: E501

        :param custom_fields: The custom_fields of this CreateStoryParams.  # noqa: E501
        :type: list[CustomFieldValueParams]
        """

        self._custom_fields = custom_fields

    @property
    def file_ids(self):
        """Gets the file_ids of this CreateStoryParams.  # noqa: E501

        An array of IDs of files attached to the story.  # noqa: E501

        :return: The file_ids of this CreateStoryParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this CreateStoryParams.

        An array of IDs of files attached to the story.  # noqa: E501

        :param file_ids: The file_ids of this CreateStoryParams.  # noqa: E501
        :type: list[int]
        """

        self._file_ids = file_ids

    @property
    def completed_at_override(self):
        """Gets the completed_at_override of this CreateStoryParams.  # noqa: E501

        A manual override for the time/date the Story was completed.  # noqa: E501

        :return: The completed_at_override of this CreateStoryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at_override

    @completed_at_override.setter
    def completed_at_override(self, completed_at_override):
        """Sets the completed_at_override of this CreateStoryParams.

        A manual override for the time/date the Story was completed.  # noqa: E501

        :param completed_at_override: The completed_at_override of this CreateStoryParams.  # noqa: E501
        :type: datetime
        """

        self._completed_at_override = completed_at_override

    @property
    def name(self):
        """Gets the name of this CreateStoryParams.  # noqa: E501

        The name of the story.  # noqa: E501

        :return: The name of this CreateStoryParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStoryParams.

        The name of the story.  # noqa: E501

        :param name: The name of this CreateStoryParams.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def comments(self):
        """Gets the comments of this CreateStoryParams.  # noqa: E501

        An array of comments to add to the story.  # noqa: E501

        :return: The comments of this CreateStoryParams.  # noqa: E501
        :rtype: list[CreateStoryCommentParams]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CreateStoryParams.

        An array of comments to add to the story.  # noqa: E501

        :param comments: The comments of this CreateStoryParams.  # noqa: E501
        :type: list[CreateStoryCommentParams]
        """

        self._comments = comments

    @property
    def epic_id(self):
        """Gets the epic_id of this CreateStoryParams.  # noqa: E501

        The ID of the epic the story belongs to.  # noqa: E501

        :return: The epic_id of this CreateStoryParams.  # noqa: E501
        :rtype: int
        """
        return self._epic_id

    @epic_id.setter
    def epic_id(self, epic_id):
        """Sets the epic_id of this CreateStoryParams.

        The ID of the epic the story belongs to.  # noqa: E501

        :param epic_id: The epic_id of this CreateStoryParams.  # noqa: E501
        :type: int
        """

        self._epic_id = epic_id

    @property
    def story_template_id(self):
        """Gets the story_template_id of this CreateStoryParams.  # noqa: E501

        The id of the story template used to create this story, if applicable.  # noqa: E501

        :return: The story_template_id of this CreateStoryParams.  # noqa: E501
        :rtype: str
        """
        return self._story_template_id

    @story_template_id.setter
    def story_template_id(self, story_template_id):
        """Sets the story_template_id of this CreateStoryParams.

        The id of the story template used to create this story, if applicable.  # noqa: E501

        :param story_template_id: The story_template_id of this CreateStoryParams.  # noqa: E501
        :type: str
        """

        self._story_template_id = story_template_id

    @property
    def external_links(self):
        """Gets the external_links of this CreateStoryParams.  # noqa: E501

        An array of External Links associated with this story.  # noqa: E501

        :return: The external_links of this CreateStoryParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """Sets the external_links of this CreateStoryParams.

        An array of External Links associated with this story.  # noqa: E501

        :param external_links: The external_links of this CreateStoryParams.  # noqa: E501
        :type: list[str]
        """

        self._external_links = external_links

    @property
    def requested_by_id(self):
        """Gets the requested_by_id of this CreateStoryParams.  # noqa: E501

        The ID of the member that requested the story.  # noqa: E501

        :return: The requested_by_id of this CreateStoryParams.  # noqa: E501
        :rtype: str
        """
        return self._requested_by_id

    @requested_by_id.setter
    def requested_by_id(self, requested_by_id):
        """Sets the requested_by_id of this CreateStoryParams.

        The ID of the member that requested the story.  # noqa: E501

        :param requested_by_id: The requested_by_id of this CreateStoryParams.  # noqa: E501
        :type: str
        """

        self._requested_by_id = requested_by_id

    @property
    def iteration_id(self):
        """Gets the iteration_id of this CreateStoryParams.  # noqa: E501

        The ID of the iteration the story belongs to.  # noqa: E501

        :return: The iteration_id of this CreateStoryParams.  # noqa: E501
        :rtype: int
        """
        return self._iteration_id

    @iteration_id.setter
    def iteration_id(self, iteration_id):
        """Sets the iteration_id of this CreateStoryParams.

        The ID of the iteration the story belongs to.  # noqa: E501

        :param iteration_id: The iteration_id of this CreateStoryParams.  # noqa: E501
        :type: int
        """

        self._iteration_id = iteration_id

    @property
    def tasks(self):
        """Gets the tasks of this CreateStoryParams.  # noqa: E501

        An array of tasks connected to the story.  # noqa: E501

        :return: The tasks of this CreateStoryParams.  # noqa: E501
        :rtype: list[CreateTaskParams]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this CreateStoryParams.

        An array of tasks connected to the story.  # noqa: E501

        :param tasks: The tasks of this CreateStoryParams.  # noqa: E501
        :type: list[CreateTaskParams]
        """

        self._tasks = tasks

    @property
    def started_at_override(self):
        """Gets the started_at_override of this CreateStoryParams.  # noqa: E501

        A manual override for the time/date the Story was started.  # noqa: E501

        :return: The started_at_override of this CreateStoryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at_override

    @started_at_override.setter
    def started_at_override(self, started_at_override):
        """Sets the started_at_override of this CreateStoryParams.

        A manual override for the time/date the Story was started.  # noqa: E501

        :param started_at_override: The started_at_override of this CreateStoryParams.  # noqa: E501
        :type: datetime
        """

        self._started_at_override = started_at_override

    @property
    def group_id(self):
        """Gets the group_id of this CreateStoryParams.  # noqa: E501

        The id of the group to associate with this story.  # noqa: E501

        :return: The group_id of this CreateStoryParams.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CreateStoryParams.

        The id of the group to associate with this story.  # noqa: E501

        :param group_id: The group_id of this CreateStoryParams.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def workflow_state_id(self):
        """Gets the workflow_state_id of this CreateStoryParams.  # noqa: E501

        The ID of the workflow state the story will be in.  # noqa: E501

        :return: The workflow_state_id of this CreateStoryParams.  # noqa: E501
        :rtype: int
        """
        return self._workflow_state_id

    @workflow_state_id.setter
    def workflow_state_id(self, workflow_state_id):
        """Sets the workflow_state_id of this CreateStoryParams.

        The ID of the workflow state the story will be in.  # noqa: E501

        :param workflow_state_id: The workflow_state_id of this CreateStoryParams.  # noqa: E501
        :type: int
        """

        self._workflow_state_id = workflow_state_id

    @property
    def updated_at(self):
        """Gets the updated_at of this CreateStoryParams.  # noqa: E501

        The time/date the Story was updated.  # noqa: E501

        :return: The updated_at of this CreateStoryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CreateStoryParams.

        The time/date the Story was updated.  # noqa: E501

        :param updated_at: The updated_at of this CreateStoryParams.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def follower_ids(self):
        """Gets the follower_ids of this CreateStoryParams.  # noqa: E501

        An array of UUIDs of the followers of this story.  # noqa: E501

        :return: The follower_ids of this CreateStoryParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._follower_ids

    @follower_ids.setter
    def follower_ids(self, follower_ids):
        """Sets the follower_ids of this CreateStoryParams.

        An array of UUIDs of the followers of this story.  # noqa: E501

        :param follower_ids: The follower_ids of this CreateStoryParams.  # noqa: E501
        :type: list[str]
        """

        self._follower_ids = follower_ids

    @property
    def owner_ids(self):
        """Gets the owner_ids of this CreateStoryParams.  # noqa: E501

        An array of UUIDs of the owners of this story.  # noqa: E501

        :return: The owner_ids of this CreateStoryParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this CreateStoryParams.

        An array of UUIDs of the owners of this story.  # noqa: E501

        :param owner_ids: The owner_ids of this CreateStoryParams.  # noqa: E501
        :type: list[str]
        """

        self._owner_ids = owner_ids

    @property
    def external_id(self):
        """Gets the external_id of this CreateStoryParams.  # noqa: E501

        This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :return: The external_id of this CreateStoryParams.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateStoryParams.

        This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :param external_id: The external_id of this CreateStoryParams.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def estimate(self):
        """Gets the estimate of this CreateStoryParams.  # noqa: E501

        The numeric point estimate of the story. Can also be null, which means unestimated.  # noqa: E501

        :return: The estimate of this CreateStoryParams.  # noqa: E501
        :rtype: int
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate):
        """Sets the estimate of this CreateStoryParams.

        The numeric point estimate of the story. Can also be null, which means unestimated.  # noqa: E501

        :param estimate: The estimate of this CreateStoryParams.  # noqa: E501
        :type: int
        """

        self._estimate = estimate

    @property
    def project_id(self):
        """Gets the project_id of this CreateStoryParams.  # noqa: E501

        The ID of the project the story belongs to.  # noqa: E501

        :return: The project_id of this CreateStoryParams.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CreateStoryParams.

        The ID of the project the story belongs to.  # noqa: E501

        :param project_id: The project_id of this CreateStoryParams.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def linked_file_ids(self):
        """Gets the linked_file_ids of this CreateStoryParams.  # noqa: E501

        An array of IDs of linked files attached to the story.  # noqa: E501

        :return: The linked_file_ids of this CreateStoryParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._linked_file_ids

    @linked_file_ids.setter
    def linked_file_ids(self, linked_file_ids):
        """Sets the linked_file_ids of this CreateStoryParams.

        An array of IDs of linked files attached to the story.  # noqa: E501

        :param linked_file_ids: The linked_file_ids of this CreateStoryParams.  # noqa: E501
        :type: list[int]
        """

        self._linked_file_ids = linked_file_ids

    @property
    def deadline(self):
        """Gets the deadline of this CreateStoryParams.  # noqa: E501

        The due date of the story.  # noqa: E501

        :return: The deadline of this CreateStoryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this CreateStoryParams.

        The due date of the story.  # noqa: E501

        :param deadline: The deadline of this CreateStoryParams.  # noqa: E501
        :type: datetime
        """

        self._deadline = deadline

    @property
    def created_at(self):
        """Gets the created_at of this CreateStoryParams.  # noqa: E501

        The time/date the Story was created.  # noqa: E501

        :return: The created_at of this CreateStoryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateStoryParams.

        The time/date the Story was created.  # noqa: E501

        :param created_at: The created_at of this CreateStoryParams.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateStoryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateStoryParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
