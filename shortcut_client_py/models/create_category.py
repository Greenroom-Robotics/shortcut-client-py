# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'color': 'str',
        'external_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'color': 'color',
        'external_id': 'external_id',
        'type': 'type'
    }

    def __init__(self, name=None, color=None, external_id=None, type=None):  # noqa: E501
        """CreateCategory - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._color = None
        self._external_id = None
        self._type = None
        self.discriminator = None
        self.name = name
        if color is not None:
            self.color = color
        if external_id is not None:
            self.external_id = external_id
        self.type = type

    @property
    def name(self):
        """Gets the name of this CreateCategory.  # noqa: E501

        The name of the new Category.  # noqa: E501

        :return: The name of this CreateCategory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCategory.

        The name of the new Category.  # noqa: E501

        :param name: The name of this CreateCategory.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def color(self):
        """Gets the color of this CreateCategory.  # noqa: E501

        The hex color to be displayed with the Category (for example, \"#ff0000\").  # noqa: E501

        :return: The color of this CreateCategory.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CreateCategory.

        The hex color to be displayed with the Category (for example, \"#ff0000\").  # noqa: E501

        :param color: The color of this CreateCategory.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def external_id(self):
        """Gets the external_id of this CreateCategory.  # noqa: E501

        This field can be set to another unique ID. In the case that the Category has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :return: The external_id of this CreateCategory.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateCategory.

        This field can be set to another unique ID. In the case that the Category has been imported from another tool, the ID in the other tool can be indicated here.  # noqa: E501

        :param external_id: The external_id of this CreateCategory.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def type(self):
        """Gets the type of this CreateCategory.  # noqa: E501

        The type of entity this Category is associated with; currently Milestone is the only type of Category.  # noqa: E501

        :return: The type of this CreateCategory.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCategory.

        The type of entity this Category is associated with; currently Milestone is the only type of Category.  # noqa: E501

        :param type: The type of this CreateCategory.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["milestone"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
