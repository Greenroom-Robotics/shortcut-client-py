# coding: utf-8

"""
    Shortcut API

    Shortcut API  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Search(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'page_size': 'int',
        'next': 'str',
        'include': 'str'
    }

    attribute_map = {
        'query': 'query',
        'page_size': 'page_size',
        'next': 'next',
        'include': 'include'
    }

    def __init__(self, query=None, page_size=None, next=None, include=None):  # noqa: E501
        """Search - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._page_size = None
        self._next = None
        self._include = None
        self.discriminator = None
        self.query = query
        if page_size is not None:
            self.page_size = page_size
        if next is not None:
            self.next = next
        if include is not None:
            self.include = include

    @property
    def query(self):
        """Gets the query of this Search.  # noqa: E501

        See our help center article on [search operators](https://help.shortcut.com/hc/en-us/articles/360000046646-Search-Operators)  # noqa: E501

        :return: The query of this Search.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Search.

        See our help center article on [search operators](https://help.shortcut.com/hc/en-us/articles/360000046646-Search-Operators)  # noqa: E501

        :param query: The query of this Search.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def page_size(self):
        """Gets the page_size of this Search.  # noqa: E501

        The number of search results to include in a page. Minimum of 1 and maximum of 25.  # noqa: E501

        :return: The page_size of this Search.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Search.

        The number of search results to include in a page. Minimum of 1 and maximum of 25.  # noqa: E501

        :param page_size: The page_size of this Search.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def next(self):
        """Gets the next of this Search.  # noqa: E501

        The next page token.  # noqa: E501

        :return: The next of this Search.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Search.

        The next page token.  # noqa: E501

        :param next: The next of this Search.  # noqa: E501
        :type: str
        """

        self._next = next

    @property
    def include(self):
        """Gets the include of this Search.  # noqa: E501


        :return: The include of this Search.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this Search.


        :param include: The include of this Search.  # noqa: E501
        :type: str
        """
        allowed_values = ["cursors"]  # noqa: E501
        if include not in allowed_values:
            raise ValueError(
                "Invalid value for `include` ({0}), must be one of {1}"  # noqa: E501
                .format(include, allowed_values)
            )

        self._include = include

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Search, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Search):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
